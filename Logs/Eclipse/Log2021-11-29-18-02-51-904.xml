<Events startTimestamp="1638200531246" logVersion="1.0.0.202108012048">
  <Command __id="14407" _type="PauseCommand" date="Mon Nov 29 18:02:51 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="26440011">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3138]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ExportCommand]]></next>
  </Command>
  <Command __id="14406" _type="ExportCommand" date="Mon Nov 29 18:02:51 EST 2021" project="Assignment5" starttimestamp="1638200531246" timestamp="26440011">
    <success><![CDATA[true]]></success>
  </Command>
  <Command __id="14409" _type="PauseCommand" date="Mon Nov 29 18:02:52 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="26441016">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ExportCommand]]></prev>
    <pause><![CDATA[1005]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14408" _type="ShellCommand" date="Mon Nov 29 18:02:52 EST 2021" starttimestamp="1638200531246" timestamp="26441016" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14411" _type="PauseCommand" date="Mon Nov 29 20:02:54 EST 2021" range=">1h" starttimestamp="1638200531246" timestamp="33643115">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7202097]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="14410" _type="BalloonCommand" date="Mon Nov 29 20:02:54 EST 2021" message="*******************************************
Worked 28 minutes(fixed)/30 minutes(context based) from
Mon Nov 29 17:32:45 EST 2021 to Mon Nov 29 18:02:52 EST 2021
Edited 1 Projects: 
	Assignment5
Edited 3 Files: 
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/CurryEvaluator.java
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/GeneralExpressionEvaluator.java
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/Functional/FuncallEvaluator.java
Number of insert: 1210
Number of delete: 872
" starttimestamp="1638200531246" timestamp="33643113">
    <fineGrainedWorkTime><![CDATA[30]]></fineGrainedWorkTime>
    <insert><![CDATA[1210]]></insert>
    <startTime><![CDATA[1638225165394]]></startTime>
    <endTime><![CDATA[1638226972262]]></endTime>
    <workTime><![CDATA[28]]></workTime>
    <delete><![CDATA[872]]></delete>
  </Command>
  <Command __id="14413" _type="PauseCommand" date="Mon Nov 29 20:07:18 EST 2021" range="2m-5m" starttimestamp="1638200531246" timestamp="33907654">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[264541]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14412" _type="ShellCommand" date="Mon Nov 29 20:07:18 EST 2021" starttimestamp="1638200531246" timestamp="33907654" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14415" _type="PauseCommand" date="Mon Nov 29 20:07:23 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="33912404">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4749]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14416" _type="MoveCaretCommand" caretOffset="512" date="Mon Nov 29 20:07:23 EST 2021" docOffset="567" starttimestamp="1638200531246" timestamp="33912593" />
  <Command __id="14417" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:07:24 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="33913338" type="Run" />
  <Command __id="14418" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:07:24 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="33913339" type="Run" />
  <Command __id="14420" _type="PauseCommand" date="Mon Nov 29 20:07:30 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="33919246">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5907]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14419" _type="ConsoleInput" date="Mon Nov 29 20:07:30 EST 2021" starttimestamp="1638200531246" timestamp="33919246" type="Exception">
    <outputString><![CDATA[(atom 5)
]]></outputString>
  </Command>
  <Command __id="14421" _type="ConsoleOutput" date="Mon Nov 29 20:07:30 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="33919312" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"T"), Diff(DELETE,"est execution time (ms):9¶Test execution time (ms):5¶Test execution time (ms):4¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14423" _type="PauseCommand" date="Mon Nov 29 20:07:33 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="33921804">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2492]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14422" _type="ShellCommand" date="Mon Nov 29 20:07:33 EST 2021" starttimestamp="1638200531246" timestamp="33921804" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14425" _type="PauseCommand" date="Mon Nov 29 20:09:40 EST 2021" range="2m-5m" starttimestamp="1638200531246" timestamp="34049387">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[127583]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14424" _type="ShellCommand" date="Mon Nov 29 20:09:40 EST 2021" starttimestamp="1638200531246" timestamp="34049387" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14427" _type="PauseCommand" date="Mon Nov 29 20:09:45 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34054234">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4847]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14426" _type="ShellCommand" date="Mon Nov 29 20:09:45 EST 2021" starttimestamp="1638200531246" timestamp="34054234" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14428" _type="ShellCommand" date="Mon Nov 29 20:09:46 EST 2021" starttimestamp="1638200531246" timestamp="34054947" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14430" _type="PauseCommand" date="Mon Nov 29 20:09:47 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34055992">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1045]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14429" _type="ShellCommand" date="Mon Nov 29 20:09:47 EST 2021" starttimestamp="1638200531246" timestamp="34055992" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14432" _type="PauseCommand" date="Mon Nov 29 20:11:28 EST 2021" range="1m-2m" starttimestamp="1638200531246" timestamp="34157371">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[101379]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14431" _type="ShellCommand" date="Mon Nov 29 20:11:28 EST 2021" starttimestamp="1638200531246" timestamp="34157371" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14434" _type="PauseCommand" date="Mon Nov 29 20:11:35 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34164535">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7164]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14435" _type="MoveCaretCommand" caretOffset="2676" date="Mon Nov 29 20:11:36 EST 2021" docOffset="2676" starttimestamp="1638200531246" timestamp="34165199" />
  <Command __id="14437" _type="PauseCommand" date="Mon Nov 29 20:11:51 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="34179759">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14560]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14436" _type="ShellCommand" date="Mon Nov 29 20:11:51 EST 2021" starttimestamp="1638200531246" timestamp="34179759" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14439" _type="PauseCommand" date="Mon Nov 29 20:11:58 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34186956">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7197]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14438" _type="ShellCommand" date="Mon Nov 29 20:11:58 EST 2021" starttimestamp="1638200531246" timestamp="34186956" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14441" _type="PauseCommand" date="Mon Nov 29 20:12:02 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34191374">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4418]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14440" _type="ConsoleInput" date="Mon Nov 29 20:12:02 EST 2021" starttimestamp="1638200531246" timestamp="34191374" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14442" _type="ConsoleOutput" date="Mon Nov 29 20:12:02 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34191448" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
T
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"T¶")]]]></diff>
  </Command>
  <Command __id="14444" _type="PauseCommand" date="Mon Nov 29 20:12:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34193859">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2411]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14443" _type="ShellCommand" date="Mon Nov 29 20:12:05 EST 2021" starttimestamp="1638200531246" timestamp="34193859" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14446" _type="PauseCommand" date="Mon Nov 29 20:12:07 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34195929">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2070]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14445" _type="ShellCommand" date="Mon Nov 29 20:12:07 EST 2021" starttimestamp="1638200531246" timestamp="34195929" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14448" _type="PauseCommand" date="Mon Nov 29 20:12:10 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34199339">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3410]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14447" _type="ShellCommand" date="Mon Nov 29 20:12:10 EST 2021" starttimestamp="1638200531246" timestamp="34199339" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14450" _type="PauseCommand" date="Mon Nov 29 20:12:17 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34205829">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6490]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14449" _type="ShellCommand" date="Mon Nov 29 20:12:17 EST 2021" starttimestamp="1638200531246" timestamp="34205829" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14452" _type="PauseCommand" date="Mon Nov 29 20:12:18 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34206900">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1070]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14451" _type="ConsoleInput" date="Mon Nov 29 20:12:18 EST 2021" starttimestamp="1638200531246" timestamp="34206899" type="Exception">
    <outputString><![CDATA[(funcall isList 5)
]]></outputString>
  </Command>
  <Command __id="14454" _type="PauseCommand" date="Mon Nov 29 20:12:20 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34209355">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[2456]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14453" _type="ConsoleInput" date="Mon Nov 29 20:12:20 EST 2021" starttimestamp="1638200531246" timestamp="34209355" type="Exception">
    <outputString><![CDATA[e
]]></outputString>
  </Command>
  <Command __id="14456" _type="PauseCommand" date="Mon Nov 29 20:12:23 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34211848">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[2493]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14455" _type="ShellCommand" date="Mon Nov 29 20:12:23 EST 2021" starttimestamp="1638200531246" timestamp="34211848" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14464" _type="PauseCommand" date="Mon Nov 29 20:12:48 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34237164">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1681]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14463" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:12:48 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34237164" type="Run" />
  <Command __id="14465" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:12:48 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34237164" type="Run" />
  <Command __id="14467" _type="PauseCommand" date="Mon Nov 29 20:12:55 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34244292">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[7128]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14466" _type="ConsoleInput" date="Mon Nov 29 20:12:55 EST 2021" starttimestamp="1638200531246" timestamp="34244292" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14468" _type="ConsoleOutput" date="Mon Nov 29 20:12:55 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34244372" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Exception in thread "main" java.util.NoSuchElementException: No line found"), Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14472" _type="PauseCommand" date="Mon Nov 29 20:13:03 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34251885">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[3412]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14471" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:13:03 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34251885" type="Run" />
  <Command __id="14474" _type="PauseCommand" date="Mon Nov 29 20:13:12 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34261324">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[9439]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14473" _type="ConsoleInput" date="Mon Nov 29 20:13:12 EST 2021" starttimestamp="1638200531246" timestamp="34261324" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14475" _type="ConsoleOutput" date="Mon Nov 29 20:13:12 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34261401" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶T¶")]]]></diff>
  </Command>
  <Command __id="14477" _type="PauseCommand" date="Mon Nov 29 20:13:14 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34263135">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1734]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14476" _type="ConsoleInput" date="Mon Nov 29 20:13:14 EST 2021" starttimestamp="1638200531246" timestamp="34263135" type="Exception">
    <outputString><![CDATA[isList
]]></outputString>
  </Command>
  <Command __id="14479" _type="PauseCommand" date="Mon Nov 29 20:13:16 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34264915">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[1780]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14478" _type="ShellCommand" date="Mon Nov 29 20:13:16 EST 2021" starttimestamp="1638200531246" timestamp="34264915" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14481" _type="PauseCommand" date="Mon Nov 29 20:13:20 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34269305">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4390]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14480" _type="ShellCommand" date="Mon Nov 29 20:13:20 EST 2021" starttimestamp="1638200531246" timestamp="34269305" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14485" _type="PauseCommand" date="Mon Nov 29 20:13:25 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34273783">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[1875]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14484" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:13:25 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34273783" type="Run" />
  <Command __id="14487" _type="PauseCommand" date="Mon Nov 29 20:13:26 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34275730">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1947]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14486" _type="ConsoleInput" date="Mon Nov 29 20:13:26 EST 2021" starttimestamp="1638200531246" timestamp="34275730" type="Exception">
    <outputString><![CDATA[(+ 5 5)
]]></outputString>
  </Command>
  <Command __id="14488" _type="ConsoleOutput" date="Mon Nov 29 20:13:27 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34275792" type="ConsoleOutput">
    <outputString><![CDATA[10
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶T"), Diff(INSERT,"10"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14490" _type="PauseCommand" date="Mon Nov 29 20:13:29 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34278651">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2859]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14489" _type="ConsoleInput" date="Mon Nov 29 20:13:29 EST 2021" starttimestamp="1638200531246" timestamp="34278651" type="Exception">
    <outputString><![CDATA[isList
]]></outputString>
  </Command>
  <Command __id="14491" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:13:29 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34278667" type="Run" />
  <Command __id="14492" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:13:29 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34278667" type="Run" />
  <Command __id="14493" _type="ExceptionCommand" date="Mon Nov 29 20:13:29 EST 2021" starttimestamp="1638200531246" timestamp="34278706" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.RuntimeException: Undefined Variable
	at mainPackage.IdentifierAtomImplementation.eval(IdentifierAtomImplementation.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at mainPackage.Runner.main(Runner.java:11)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="14494" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:13:30 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34279665" type="Run" />
  <Command __id="14495" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:13:30 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34279665" type="Run" />
  <Command __id="14497" _type="PauseCommand" date="Mon Nov 29 20:13:32 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34280820">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1155]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14496" _type="ShellCommand" date="Mon Nov 29 20:13:32 EST 2021" starttimestamp="1638200531246" timestamp="34280820" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14499" _type="PauseCommand" date="Mon Nov 29 20:13:54 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="34302809">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21989]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14498" _type="ShellCommand" date="Mon Nov 29 20:13:54 EST 2021" starttimestamp="1638200531246" timestamp="34302809" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14501" _type="PauseCommand" date="Mon Nov 29 20:13:55 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34304401">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1592]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14500" _type="ShellCommand" date="Mon Nov 29 20:13:55 EST 2021" starttimestamp="1638200531246" timestamp="34304401" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14502" _type="ShellCommand" date="Mon Nov 29 20:13:56 EST 2021" starttimestamp="1638200531246" timestamp="34305176" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14504" _type="PauseCommand" date="Mon Nov 29 20:13:59 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34308704">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3528]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14503" _type="ConsoleInput" date="Mon Nov 29 20:13:59 EST 2021" starttimestamp="1638200531246" timestamp="34308704" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14505" _type="ConsoleOutput" date="Mon Nov 29 20:14:00 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34308809" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"10"), Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14509" _type="PauseCommand" date="Mon Nov 29 20:14:03 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34312746">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[2021]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14508" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:14:03 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34312746" type="Run" />
  <Command __id="14510" _type="ShellCommand" date="Mon Nov 29 20:14:04 EST 2021" starttimestamp="1638200531246" timestamp="34313252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14512" _type="PauseCommand" date="Mon Nov 29 20:14:09 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34317909">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4657]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14511" _type="ShellCommand" date="Mon Nov 29 20:14:09 EST 2021" starttimestamp="1638200531246" timestamp="34317909" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14514" _type="PauseCommand" date="Mon Nov 29 20:14:10 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34319044">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1135]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="14513" _type="ConsoleOutput" date="Mon Nov 29 20:14:10 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34319044" type="ConsoleOutput">
    <outputString><![CDATA[(
 setq isList (
			  lambda (X) 
			  (
			   cond (
					 ((atom X) (Nil))
					 ((T) (T))
				)
			  )
)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z"), Diff(INSERT,"(¶ setq isList (¶			  lambda (X) ¶			  (¶			   cond (¶					 ((atom X) (Nil))¶					 ((T) (T))¶				)¶			  "), Diff(EQUAL,")¶"), Diff(DELETE,"T"), Diff(INSERT,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14515" _type="PasteCommand" date="Mon Nov 29 20:14:10 EST 2021" starttimestamp="1638200531246" timestamp="34319054" />
  <Command __id="14517" _type="PauseCommand" date="Mon Nov 29 20:14:15 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34324388">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[5334]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14516" _type="ConsoleInput" date="Mon Nov 29 20:14:15 EST 2021" starttimestamp="1638200531246" timestamp="34324388" type="Exception">
    <outputString><![CDATA[)
]]></outputString>
  </Command>
  <Command __id="14518" _type="ConsoleOutput" date="Mon Nov 29 20:14:15 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34324449" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(¶ setq isList (¶			  lambda (X) ¶			  (¶			   cond (¶					 ((atom X) (Nil))¶					 ((T) (T))¶				)¶			  )¶"), Diff(INSERT,"LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T)))"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="14520" _type="PauseCommand" date="Mon Nov 29 20:14:17 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34325796">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1347]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14519" _type="ShellCommand" date="Mon Nov 29 20:14:17 EST 2021" starttimestamp="1638200531246" timestamp="34325796" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14524" _type="PauseCommand" date="Mon Nov 29 20:14:38 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34347433">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1546]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14523" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:14:38 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34347433" type="Run" />
  <Command __id="14526" _type="PauseCommand" date="Mon Nov 29 20:14:39 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34348490">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1057]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14525" _type="ShellCommand" date="Mon Nov 29 20:14:39 EST 2021" starttimestamp="1638200531246" timestamp="34348490" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14527" _type="ShellCommand" date="Mon Nov 29 20:14:40 EST 2021" starttimestamp="1638200531246" timestamp="34349427" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14529" _type="PauseCommand" date="Mon Nov 29 20:14:46 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34354791">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5364]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14528" _type="ConsoleInput" date="Mon Nov 29 20:14:46 EST 2021" starttimestamp="1638200531246" timestamp="34354791" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14530" _type="ConsoleOutput" date="Mon Nov 29 20:14:46 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34354871" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))
T
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))¶"), Diff(INSERT,"T¶")]]]></diff>
  </Command>
  <Command __id="14532" _type="PauseCommand" date="Mon Nov 29 20:14:48 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34356815">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1944]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14531" _type="ConsoleInput" date="Mon Nov 29 20:14:48 EST 2021" starttimestamp="1638200531246" timestamp="34356815" type="Exception">
    <outputString><![CDATA[isList
]]></outputString>
  </Command>
  <Command __id="14533" _type="ConsoleOutput" date="Mon Nov 29 20:14:48 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34356868" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))¶"), Diff(DELETE,"T¶")]]]></diff>
  </Command>
  <Command __id="14540" _type="PauseCommand" date="Mon Nov 29 20:14:56 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34364949">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[4023]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14539" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:14:56 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34364949" type="Run" />
  <Command __id="14541" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:14:56 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34364951" type="Run" />
  <Command __id="14543" _type="PauseCommand" date="Mon Nov 29 20:15:00 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34369355">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4404]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14542" _type="ConsoleInput" date="Mon Nov 29 20:15:00 EST 2021" starttimestamp="1638200531246" timestamp="34369355" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14544" _type="ConsoleOutput" date="Mon Nov 29 20:15:00 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34369432" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))
T
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))¶"), Diff(INSERT,"T¶")]]]></diff>
  </Command>
  <Command __id="14546" _type="PauseCommand" date="Mon Nov 29 20:15:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34373818">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4386]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14545" _type="ConsoleInput" date="Mon Nov 29 20:15:05 EST 2021" starttimestamp="1638200531246" timestamp="34373818" type="Exception">
    <outputString><![CDATA[(funcall isList 5)
]]></outputString>
  </Command>
  <Command __id="14547" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:15:05 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34373830" type="Run" />
  <Command __id="14548" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:15:05 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34373831" type="Run" />
  <Command __id="14549" _type="ExceptionCommand" date="Mon Nov 29 20:15:05 EST 2021" starttimestamp="1638200531246" timestamp="34373875" type="Exception">
    <exceptionString><![CDATA[F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Exception in thread "main" Evaluated Expression: LAMBDA (X) (COND (((ATOM X) (NIL)) ((T) (T))))
java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:22)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at mainPackage.Expression.CondEvaluator.eval(CondEvaluator.java:26)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at mainPackage.LambdaApplicationEvaluator.helper(LambdaApplicationEvaluator.java:20)
	at mainPackage.Functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at mainPackage.Runner.main(Runner.java:11)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="14551" _type="PauseCommand" date="Mon Nov 29 20:15:28 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="34396886">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[23011]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14550" _type="ShellCommand" date="Mon Nov 29 20:15:28 EST 2021" starttimestamp="1638200531246" timestamp="34396886" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14555" _type="PauseCommand" date="Mon Nov 29 20:16:07 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34436456">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1494]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14554" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:16:07 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34436456" type="Run" />
  <Command __id="14556" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:16:07 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34436456" type="Run" />
  <Command __id="14558" _type="PauseCommand" date="Mon Nov 29 20:16:13 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34442207">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5751]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14557" _type="ConsoleInput" date="Mon Nov 29 20:16:13 EST 2021" starttimestamp="1638200531246" timestamp="34442207" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14559" _type="ConsoleOutput" date="Mon Nov 29 20:16:13 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34442295" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) ((+ X X))
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) ("), Diff(DELETE,"COND (((ATOM X) (NIL)) ((T) (T))"), Diff(INSERT,"(+ X X"), Diff(EQUAL,"))¶T¶")]]]></diff>
  </Command>
  <Command __id="14561" _type="PauseCommand" date="Mon Nov 29 20:16:17 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34445883">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3588]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14560" _type="ConsoleInput" date="Mon Nov 29 20:16:17 EST 2021" starttimestamp="1638200531246" timestamp="34445883" type="Exception">
    <outputString><![CDATA[(funcall isList 5)
]]></outputString>
  </Command>
  <Command __id="14562" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:16:17 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34445896" type="Run" />
  <Command __id="14563" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:16:17 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34445896" type="Run" />
  <Command __id="14564" _type="ExceptionCommand" date="Mon Nov 29 20:16:17 EST 2021" starttimestamp="1638200531246" timestamp="34445938" type="Exception">
    <exceptionString><![CDATA[F: FUNCALL
E: ISLIST
Exception in thread "main" UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) ((+ X X))
java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:22)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at mainPackage.LambdaApplicationEvaluator.helper(LambdaApplicationEvaluator.java:20)
	at mainPackage.Functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at mainPackage.Runner.main(Runner.java:11)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="14566" _type="PauseCommand" date="Mon Nov 29 20:16:29 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="34458435">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[12497]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14565" _type="ShellCommand" date="Mon Nov 29 20:16:29 EST 2021" starttimestamp="1638200531246" timestamp="34458435" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14570" _type="PauseCommand" date="Mon Nov 29 20:16:54 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34483559">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1603]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14569" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:16:54 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34483559" type="Run" />
  <Command __id="14571" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:16:54 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34483560" type="Run" />
  <Command __id="14573" _type="PauseCommand" date="Mon Nov 29 20:17:00 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34489295">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5735]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14572" _type="ConsoleInput" date="Mon Nov 29 20:17:00 EST 2021" starttimestamp="1638200531246" timestamp="34489295" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14574" _type="ConsoleOutput" date="Mon Nov 29 20:17:00 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34489377" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (+ X X)
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) "), Diff(DELETE,"("), Diff(EQUAL,"(+ X X)"), Diff(DELETE,")"), Diff(EQUAL,"¶T¶")]]]></diff>
  </Command>
  <Command __id="14576" _type="PauseCommand" date="Mon Nov 29 20:17:03 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34492730">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3353]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14575" _type="ConsoleInput" date="Mon Nov 29 20:17:03 EST 2021" starttimestamp="1638200531246" timestamp="34492730" type="Exception">
    <outputString><![CDATA[(funcall isList 5)
]]></outputString>
  </Command>
  <Command __id="14577" _type="ConsoleOutput" date="Mon Nov 29 20:17:04 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34492787" type="ConsoleOutput">
    <outputString><![CDATA[F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (+ X X)
10
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶"), Diff(EQUAL,"F: FUNCALL¶E: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (+ X X)¶T"), Diff(INSERT,"+ X X)¶10"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14579" _type="PauseCommand" date="Mon Nov 29 20:17:06 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34495021">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2234]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14578" _type="ShellCommand" date="Mon Nov 29 20:17:06 EST 2021" starttimestamp="1638200531246" timestamp="34495021" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14581" _type="PauseCommand" date="Mon Nov 29 20:19:07 EST 2021" range="2m-5m" starttimestamp="1638200531246" timestamp="34616144">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[121123]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14580" _type="ShellCommand" date="Mon Nov 29 20:19:07 EST 2021" starttimestamp="1638200531246" timestamp="34616144" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14583" _type="PauseCommand" date="Mon Nov 29 20:19:11 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34619793">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3649]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14582" _type="ConsoleInput" date="Mon Nov 29 20:19:11 EST 2021" starttimestamp="1638200531246" timestamp="34619793" type="Exception">
    <outputString><![CDATA[(eq 5 5)
]]></outputString>
  </Command>
  <Command __id="14584" _type="ConsoleOutput" date="Mon Nov 29 20:19:11 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34619850" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (+ X X)¶10"), Diff(INSERT,"T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14586" _type="PauseCommand" date="Mon Nov 29 20:19:13 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34622753">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2903]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14585" _type="ConsoleInput" date="Mon Nov 29 20:19:13 EST 2021" starttimestamp="1638200531246" timestamp="34622753" type="Exception">
    <outputString><![CDATA[(eq nil nil)
]]></outputString>
  </Command>
  <Command __id="14587" _type="ConsoleOutput" date="Mon Nov 29 20:19:14 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34622810" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"T¶")]]]></diff>
  </Command>
  <Command __id="14589" _type="PauseCommand" date="Mon Nov 29 20:19:18 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34626933">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4123]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14588" _type="ConsoleInput" date="Mon Nov 29 20:19:18 EST 2021" starttimestamp="1638200531246" timestamp="34626933" type="Exception">
    <outputString><![CDATA[(eq nil T)
]]></outputString>
  </Command>
  <Command __id="14590" _type="ConsoleOutput" date="Mon Nov 29 20:19:18 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34626990" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"T"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14592" _type="PauseCommand" date="Mon Nov 29 20:19:22 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34630842">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3852]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14591" _type="ShellCommand" date="Mon Nov 29 20:19:22 EST 2021" starttimestamp="1638200531246" timestamp="34630842" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14594" _type="PauseCommand" date="Mon Nov 29 20:19:53 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="34661798">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30956]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14593" _type="ShellCommand" date="Mon Nov 29 20:19:53 EST 2021" starttimestamp="1638200531246" timestamp="34661798" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14595" _type="ShellCommand" date="Mon Nov 29 20:19:53 EST 2021" starttimestamp="1638200531246" timestamp="34662180" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14597" _type="PauseCommand" date="Mon Nov 29 20:21:00 EST 2021" range="1m-2m" starttimestamp="1638200531246" timestamp="34729115">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[66935]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14596" _type="ShellCommand" date="Mon Nov 29 20:21:00 EST 2021" starttimestamp="1638200531246" timestamp="34729115" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14599" _type="PauseCommand" date="Mon Nov 29 20:21:04 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34733297">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4182]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14598" _type="ConsoleInput" date="Mon Nov 29 20:21:04 EST 2021" starttimestamp="1638200531246" timestamp="34733297" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14600" _type="ConsoleOutput" date="Mon Nov 29 20:21:04 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34733408" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))
T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"NIL"), Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))¶T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14607" _type="PauseCommand" date="Mon Nov 29 20:21:12 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34741031">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[4425]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14606" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:21:12 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34741029" type="Run" />
  <Command __id="14608" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:21:12 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34741031" type="Run" />
  <Command __id="14610" _type="PauseCommand" date="Mon Nov 29 20:23:23 EST 2021" range="2m-5m" starttimestamp="1638200531246" timestamp="34872434">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[131403]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14609" _type="ShellCommand" date="Mon Nov 29 20:23:23 EST 2021" starttimestamp="1638200531246" timestamp="34872434" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14612" _type="PauseCommand" date="Mon Nov 29 20:23:25 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34873911">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1477]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14611" _type="ShellCommand" date="Mon Nov 29 20:23:25 EST 2021" starttimestamp="1638200531246" timestamp="34873911" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14614" _type="PauseCommand" date="Mon Nov 29 20:23:30 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="34879114">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5202]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14613" _type="ConsoleInput" date="Mon Nov 29 20:23:30 EST 2021" starttimestamp="1638200531246" timestamp="34879113" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14615" _type="ConsoleOutput" date="Mon Nov 29 20:23:30 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34879197" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))¶T¶")]]]></diff>
  </Command>
  <Command __id="14617" _type="PauseCommand" date="Mon Nov 29 20:23:35 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34884179">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4982]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14616" _type="ConsoleInput" date="Mon Nov 29 20:23:35 EST 2021" starttimestamp="1638200531246" timestamp="34884179" type="Exception">
    <outputString><![CDATA[(funcall isList 5)
]]></outputString>
  </Command>
  <Command __id="14618" _type="ConsoleOutput" date="Mon Nov 29 20:23:35 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34884235" type="ConsoleOutput">
    <outputString><![CDATA[F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))
NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶"), Diff(EQUAL,"F: FUNCALL¶E: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X)"), Diff(DELETE," (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X)"), Diff(EQUAL," (COND ((ATOM X) (EQ X NIL) (T NIL)))¶"), Diff(DELETE,"T"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14620" _type="PauseCommand" date="Mon Nov 29 20:23:39 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34888513">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4278]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14619" _type="ShellCommand" date="Mon Nov 29 20:23:39 EST 2021" starttimestamp="1638200531246" timestamp="34888513" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14622" _type="PauseCommand" date="Mon Nov 29 20:24:09 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="34918473">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29960]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14621" _type="ShellCommand" date="Mon Nov 29 20:24:09 EST 2021" starttimestamp="1638200531246" timestamp="34918473" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14624" _type="PauseCommand" date="Mon Nov 29 20:24:14 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34923426">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4953]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14623" _type="ConsoleInput" date="Mon Nov 29 20:24:14 EST 2021" starttimestamp="1638200531246" timestamp="34923426" type="Exception">
    <outputString><![CDATA[(funcall isList nil)
]]></outputString>
  </Command>
  <Command __id="14625" _type="ConsoleOutput" date="Mon Nov 29 20:24:14 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="34923482" type="ConsoleOutput">
    <outputString><![CDATA[F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))¶"), Diff(DELETE,"NIL"), Diff(INSERT,"T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14627" _type="PauseCommand" date="Mon Nov 29 20:24:25 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="34934150">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10668]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14628" _type="MoveCaretCommand" caretOffset="467" date="Mon Nov 29 20:24:26 EST 2021" docOffset="871" starttimestamp="1638200531246" timestamp="34934848" />
  <Command __id="14630" _type="PauseCommand" date="Mon Nov 29 20:24:27 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34936084">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1236]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="14629" _type="MoveCaretCommand" caretOffset="422" date="Mon Nov 29 20:24:27 EST 2021" docOffset="826" starttimestamp="1638200531246" timestamp="34936084" />
  <Command __id="14632" _type="InsertStringCommand" date="Mon Nov 29 20:24:28 EST 2021" starttimestamp="1638200531246" timestamp="34936942" timestamp2="34936942">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14634" _type="InsertStringCommand" date="Mon Nov 29 20:24:28 EST 2021" starttimestamp="1638200531246" timestamp="34937069" timestamp2="34937069">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14635" _type="MoveCaretCommand" caretOffset="870" date="Mon Nov 29 20:24:29 EST 2021" docOffset="1274" starttimestamp="1638200531246" timestamp="34938044" />
  <Command __id="14637" _type="InsertStringCommand" date="Mon Nov 29 20:24:29 EST 2021" starttimestamp="1638200531246" timestamp="34938571" timestamp2="34938571">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14639" _type="InsertStringCommand" date="Mon Nov 29 20:24:29 EST 2021" starttimestamp="1638200531246" timestamp="34938696" timestamp2="34938696">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14640" _type="MoveCaretCommand" caretOffset="974" date="Mon Nov 29 20:24:30 EST 2021" docOffset="1378" starttimestamp="1638200531246" timestamp="34939039" />
  <Command __id="14642" _type="InsertStringCommand" date="Mon Nov 29 20:24:30 EST 2021" starttimestamp="1638200531246" timestamp="34939260" timestamp2="34939260">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14644" _type="InsertStringCommand" date="Mon Nov 29 20:24:30 EST 2021" starttimestamp="1638200531246" timestamp="34939411" timestamp2="34939411">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14646" _type="PauseCommand" date="Mon Nov 29 20:24:32 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34941183">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1772]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="14645" _type="MoveCaretCommand" caretOffset="560" date="Mon Nov 29 20:24:32 EST 2021" docOffset="964" starttimestamp="1638200531246" timestamp="34941183" />
  <Command __id="14648" _type="InsertStringCommand" date="Mon Nov 29 20:24:33 EST 2021" starttimestamp="1638200531246" timestamp="34941788" timestamp2="34941788">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14650" _type="InsertStringCommand" date="Mon Nov 29 20:24:33 EST 2021" starttimestamp="1638200531246" timestamp="34941956" timestamp2="34941956">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="14652" _type="PauseCommand" date="Mon Nov 29 20:24:34 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="34943705">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1749]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="14651" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Nov 29 20:24:34 EST 2021" starttimestamp="1638200531246" timestamp="34943705" />
  <Command __id="14653" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:24:35 EST 2021" starttimestamp="1638200531246" timestamp="34943800" />
  <Command __id="14654" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:24:35 EST 2021" starttimestamp="1638200531246" timestamp="34943816" />
  <Command __id="14656" _type="PauseCommand" date="Mon Nov 29 20:24:37 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="34946252">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2436]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14655" _type="ShellCommand" date="Mon Nov 29 20:24:37 EST 2021" starttimestamp="1638200531246" timestamp="34946252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14657" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:24:37 EST 2021" starttimestamp="1638200531246" timestamp="34946635" />
  <Command __id="14658" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:24:37 EST 2021" starttimestamp="1638200531246" timestamp="34946640" />
  <Command __id="14660" _type="PauseCommand" date="Mon Nov 29 20:25:15 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="34983945">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[37305]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14659" _type="ShellCommand" date="Mon Nov 29 20:25:15 EST 2021" starttimestamp="1638200531246" timestamp="34983945" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14661" _type="ShellCommand" date="Mon Nov 29 20:25:16 EST 2021" starttimestamp="1638200531246" timestamp="34984789" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14663" _type="PauseCommand" date="Mon Nov 29 20:25:30 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="34998985">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14196]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14662" _type="ShellCommand" date="Mon Nov 29 20:25:30 EST 2021" starttimestamp="1638200531246" timestamp="34998985" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14665" _type="PauseCommand" date="Mon Nov 29 20:25:32 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35000755">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1770]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="14666" _type="InsertStringCommand" date="Mon Nov 29 20:25:32 EST 2021" starttimestamp="1638200531246" timestamp="35000757" timestamp2="35000757">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="14674" _type="PauseCommand" date="Mon Nov 29 20:25:36 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35004865">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2000]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14673" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:25:36 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35004865" type="Run" />
  <Command __id="14676" _type="PauseCommand" date="Mon Nov 29 20:25:41 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35009926">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5061]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14675" _type="ConsoleInput" date="Mon Nov 29 20:25:41 EST 2021" starttimestamp="1638200531246" timestamp="35009926" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14677" _type="ConsoleOutput" date="Mon Nov 29 20:25:41 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35010010" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))
T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: "), Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))¶T¶")]]]></diff>
  </Command>
  <Command __id="14684" _type="PauseCommand" date="Mon Nov 29 20:25:53 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35022661">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[4894]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14683" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:25:53 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35022661" type="Run" />
  <Command __id="14685" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:25:53 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35022664" type="Run" />
  <Command __id="14687" _type="PauseCommand" date="Mon Nov 29 20:26:00 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35029031">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6367]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14686" _type="ConsoleInput" date="Mon Nov 29 20:26:00 EST 2021" starttimestamp="1638200531246" timestamp="35029031" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14688" _type="ConsoleOutput" date="Mon Nov 29 20:26:00 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35029138" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))¶T¶")]]]></diff>
  </Command>
  <Command __id="14690" _type="PauseCommand" date="Mon Nov 29 20:26:11 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35039911">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10773]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14689" _type="ConsoleInput" date="Mon Nov 29 20:26:11 EST 2021" starttimestamp="1638200531246" timestamp="35039911" type="Exception">
    <outputString><![CDATA[(funcall isList (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14691" _type="ConsoleOutput" date="Mon Nov 29 20:26:11 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35039969" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T NIL)))¶T"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14693" _type="PauseCommand" date="Mon Nov 29 20:26:13 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35042627">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2658]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14692" _type="ShellCommand" date="Mon Nov 29 20:26:13 EST 2021" starttimestamp="1638200531246" timestamp="35042627" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14697" _type="PauseCommand" date="Mon Nov 29 20:28:21 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35169888">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2140]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14696" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:28:21 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35169888" type="Run" />
  <Command __id="14699" _type="PauseCommand" date="Mon Nov 29 20:28:26 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35175558">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5670]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14698" _type="ConsoleInput" date="Mon Nov 29 20:28:26 EST 2021" starttimestamp="1638200531246" timestamp="35175558" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14700" _type="ConsoleOutput" date="Mon Nov 29 20:28:26 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35175642" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
42
42
42
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X Y Z) (* X (* Y Z))
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))
T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"NIL"), Diff(INSERT,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14702" _type="PauseCommand" date="Mon Nov 29 20:28:29 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35178732">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3090]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14701" _type="ShellCommand" date="Mon Nov 29 20:28:29 EST 2021" starttimestamp="1638200531246" timestamp="35178732" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14704" _type="PauseCommand" date="Mon Nov 29 20:28:35 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35183803">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5071]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14703" _type="ShellCommand" date="Mon Nov 29 20:28:35 EST 2021" starttimestamp="1638200531246" timestamp="35183803" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14706" _type="PauseCommand" date="Mon Nov 29 20:28:37 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35186038">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2235]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14705" _type="ShellCommand" date="Mon Nov 29 20:28:37 EST 2021" starttimestamp="1638200531246" timestamp="35186038" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14708" _type="PauseCommand" date="Mon Nov 29 20:28:41 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35190533">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4495]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14707" _type="ShellCommand" date="Mon Nov 29 20:28:41 EST 2021" starttimestamp="1638200531246" timestamp="35190533" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14710" _type="PauseCommand" date="Mon Nov 29 20:28:44 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35192997">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2464]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14709" _type="ConsoleInput" date="Mon Nov 29 20:28:44 EST 2021" starttimestamp="1638200531246" timestamp="35192997" type="Exception">
    <outputString><![CDATA[(funcall isList nil)
]]></outputString>
  </Command>
  <Command __id="14711" _type="ConsoleOutput" date="Mon Nov 29 20:28:44 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35193053" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶42¶42¶42¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X Y Z) (* X (* Y Z))¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶"), Diff(EQUAL,"T¶")]]]></diff>
  </Command>
  <Command __id="14712" _type="ShellCommand" date="Mon Nov 29 20:28:45 EST 2021" starttimestamp="1638200531246" timestamp="35193996" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14714" _type="PauseCommand" date="Mon Nov 29 20:28:46 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35195238">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1242]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14713" _type="ShellCommand" date="Mon Nov 29 20:28:46 EST 2021" starttimestamp="1638200531246" timestamp="35195238" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14716" _type="PauseCommand" date="Mon Nov 29 20:28:51 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35199846">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4608]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14715" _type="ShellCommand" date="Mon Nov 29 20:28:51 EST 2021" starttimestamp="1638200531246" timestamp="35199846" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14718" _type="PauseCommand" date="Mon Nov 29 20:28:52 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35201414">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1568]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14717" _type="ShellCommand" date="Mon Nov 29 20:28:52 EST 2021" starttimestamp="1638200531246" timestamp="35201414" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14720" _type="PauseCommand" date="Mon Nov 29 20:28:56 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35204773">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3359]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14719" _type="ConsoleInput" date="Mon Nov 29 20:28:56 EST 2021" starttimestamp="1638200531246" timestamp="35204773" type="Exception">
    <outputString><![CDATA[(funcall isList (cons 5 Nil))
]]></outputString>
  </Command>
  <Command __id="14721" _type="ConsoleOutput" date="Mon Nov 29 20:28:56 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35204878" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"T"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14722" _type="ShellCommand" date="Mon Nov 29 20:28:57 EST 2021" starttimestamp="1638200531246" timestamp="35205823" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14724" _type="PauseCommand" date="Mon Nov 29 20:28:58 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35207477">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1654]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14723" _type="ShellCommand" date="Mon Nov 29 20:28:58 EST 2021" starttimestamp="1638200531246" timestamp="35207477" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14726" _type="PauseCommand" date="Mon Nov 29 20:29:10 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35219349">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11872]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14725" _type="ShellCommand" date="Mon Nov 29 20:29:10 EST 2021" starttimestamp="1638200531246" timestamp="35219349" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14728" _type="PauseCommand" date="Mon Nov 29 20:29:40 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="35248844">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29495]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14727" _type="ShellCommand" date="Mon Nov 29 20:29:40 EST 2021" starttimestamp="1638200531246" timestamp="35248844" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14730" _type="PauseCommand" date="Mon Nov 29 20:29:47 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35255892">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7048]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14729" _type="ConsoleInput" date="Mon Nov 29 20:29:47 EST 2021" starttimestamp="1638200531246" timestamp="35255892" type="Exception">
    <outputString><![CDATA[(cdr (cons 5 Nil))
]]></outputString>
  </Command>
  <Command __id="14731" _type="ConsoleOutput" date="Mon Nov 29 20:29:47 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35255950" type="ConsoleOutput">
    <outputString><![CDATA[NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"NIL¶")]]]></diff>
  </Command>
  <Command __id="14733" _type="PauseCommand" date="Mon Nov 29 20:29:52 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35260892">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4942]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14732" _type="ShellCommand" date="Mon Nov 29 20:29:52 EST 2021" starttimestamp="1638200531246" timestamp="35260892" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14735" _type="PauseCommand" date="Mon Nov 29 20:30:19 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="35288689">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[27797]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14734" _type="ShellCommand" date="Mon Nov 29 20:30:19 EST 2021" starttimestamp="1638200531246" timestamp="35288689" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14737" _type="PauseCommand" date="Mon Nov 29 20:30:23 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35292338">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3649]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="14736" _type="MoveCaretCommand" caretOffset="493" date="Mon Nov 29 20:30:23 EST 2021" docOffset="897" starttimestamp="1638200531246" timestamp="35292338" />
  <Command __id="14738" _type="MoveCaretCommand" caretOffset="423" date="Mon Nov 29 20:30:23 EST 2021" docOffset="827" starttimestamp="1638200531246" timestamp="35292622" />
  <Command __id="14739" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Nov 29 20:30:24 EST 2021" starttimestamp="1638200531246" timestamp="35293596" />
  <Command __id="14741" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:25 EST 2021" starttimestamp="1638200531246" timestamp="35293911" />
  <Command __id="14743" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:25 EST 2021" starttimestamp="1638200531246" timestamp="35294117" />
  <Command __id="14745" _type="PauseCommand" date="Mon Nov 29 20:30:26 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35295119">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1002]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="14744" _type="MoveCaretCommand" caretOffset="560" date="Mon Nov 29 20:30:26 EST 2021" docOffset="964" starttimestamp="1638200531246" timestamp="35295119" />
  <Command __id="14747" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:26 EST 2021" starttimestamp="1638200531246" timestamp="35295494" />
  <Command __id="14749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:26 EST 2021" starttimestamp="1638200531246" timestamp="35295668" />
  <Command __id="14751" _type="PauseCommand" date="Mon Nov 29 20:30:29 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35298052">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2384]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="14750" _type="MoveCaretCommand" caretOffset="868" date="Mon Nov 29 20:30:29 EST 2021" docOffset="1272" starttimestamp="1638200531246" timestamp="35298052" />
  <Command __id="14752" _type="MoveCaretCommand" caretOffset="869" date="Mon Nov 29 20:30:29 EST 2021" docOffset="1273" starttimestamp="1638200531246" timestamp="35298673" />
  <Command __id="14753" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Nov 29 20:30:30 EST 2021" starttimestamp="1638200531246" timestamp="35299276" />
  <Command __id="14755" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:30 EST 2021" starttimestamp="1638200531246" timestamp="35299597" />
  <Command __id="14757" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:31 EST 2021" starttimestamp="1638200531246" timestamp="35299773" />
  <Command __id="14758" _type="MoveCaretCommand" caretOffset="971" date="Mon Nov 29 20:30:31 EST 2021" docOffset="1375" starttimestamp="1638200531246" timestamp="35300107" />
  <Command __id="14759" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Nov 29 20:30:31 EST 2021" starttimestamp="1638200531246" timestamp="35300544" />
  <Command __id="14761" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:32 EST 2021" starttimestamp="1638200531246" timestamp="35300895" />
  <Command __id="14763" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:30:32 EST 2021" starttimestamp="1638200531246" timestamp="35301069" />
  <Command __id="14765" _type="PauseCommand" date="Mon Nov 29 20:30:34 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35302959">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1890]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="14764" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Nov 29 20:30:34 EST 2021" starttimestamp="1638200531246" timestamp="35302959" />
  <Command __id="14766" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:30:34 EST 2021" starttimestamp="1638200531246" timestamp="35303055" />
  <Command __id="14767" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:30:34 EST 2021" starttimestamp="1638200531246" timestamp="35303067" />
  <DocumentChange __id="14202" _type="Insert" date="Mon Nov 29 18:01:09 EST 2021" docASTNodeCount="561" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" length="31" offset="2255" repeat="30" starttimestamp="1638200531246" timestamp="26338725" timestamp2="26347281">
    <text><![CDATA[(numRemainingArgs, FLambdaArgs)]]></text>
  </DocumentChange>
  <DocumentChange __id="14288" _type="Insert" date="Mon Nov 29 18:01:53 EST 2021" docASTNodeCount="562" docActiveCodeLength="3338" docExpressionCount="358" docLength="3352" length="6" offset="2115" repeat="6" starttimestamp="1638200531246" timestamp="26382415" timestamp2="26382852">
    <text><![CDATA[final ]]></text>
  </DocumentChange>
  <DocumentChange __id="14301" _type="Delete" date="Mon Nov 29 18:01:54 EST 2021" docASTNodeCount="562" docActiveCodeLength="3335" docExpressionCount="358" docLength="3349" endLine="59" length="3" offset="2188" repeat="3" startLine="58" starttimestamp="1638200531246" timestamp="26383595" timestamp2="26385051">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="14310" _type="Delete" date="Mon Nov 29 18:01:56 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" endLine="57" length="3" offset="2109" repeat="3" startLine="56" starttimestamp="1638200531246" timestamp="26385717" timestamp2="26386223">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="14325" _type="Delete" date="Mon Nov 29 18:02:03 EST 2021" docASTNodeCount="562" docActiveCodeLength="3331" docExpressionCount="358" docLength="3345" endLine="62" length="1" offset="2440" startLine="62" starttimestamp="1638200531246" timestamp="26392414">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="14327" _type="Insert" date="Mon Nov 29 18:02:03 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" length="1" offset="2440" starttimestamp="1638200531246" timestamp="26392504">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="14339" _type="Replace" date="Mon Nov 29 18:02:06 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" endLine="66" insertionLength="11" int_docASTNodeCount="560" int_docActiveCodeLength="3321" int_docExpressionCount="356" int_docLength="3335" length="11" offset="2615" startLine="66" starttimestamp="1638200531246" timestamp="26395746">
    <deletedText><![CDATA[FLambdaArgs]]></deletedText>
    <insertedText><![CDATA[fLambdaArgs]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="14344" _type="Replace" date="Mon Nov 29 18:02:08 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" endLine="68" insertionLength="11" int_docASTNodeCount="544" int_docActiveCodeLength="3321" int_docExpressionCount="344" int_docLength="3335" length="11" offset="2693" startLine="68" starttimestamp="1638200531246" timestamp="26396998">
    <deletedText><![CDATA[FLambdaArgs]]></deletedText>
    <insertedText><![CDATA[fLambdaArgs]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="14353" _type="Replace" date="Mon Nov 29 18:02:12 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" endLine="15" insertionLength="11" int_docASTNodeCount="516" int_docActiveCodeLength="3321" int_docExpressionCount="330" int_docLength="3335" length="11" offset="536" startLine="15" starttimestamp="1638200531246" timestamp="26400769">
    <deletedText><![CDATA[FLambdaArgs]]></deletedText>
    <insertedText><![CDATA[fLambdaArgs]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="14361" _type="Replace" date="Mon Nov 29 18:02:14 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" endLine="17" insertionLength="11" int_docASTNodeCount="560" int_docActiveCodeLength="3321" int_docExpressionCount="356" int_docLength="3335" length="11" offset="603" startLine="17" starttimestamp="1638200531246" timestamp="26402965">
    <deletedText><![CDATA[FLambdaArgs]]></deletedText>
    <insertedText><![CDATA[fLambdaArgs]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="14365" _type="Replace" date="Mon Nov 29 18:02:15 EST 2021" docASTNodeCount="562" docActiveCodeLength="3332" docExpressionCount="358" docLength="3346" endLine="20" insertionLength="11" int_docASTNodeCount="544" int_docActiveCodeLength="3321" int_docExpressionCount="344" int_docLength="3335" length="11" offset="755" startLine="20" starttimestamp="1638200531246" timestamp="26404301">
    <deletedText><![CDATA[FLambdaArgs]]></deletedText>
    <insertedText><![CDATA[fLambdaArgs]]></insertedText>
  </DocumentChange>
  <Command __id="14414" _type="DiffBasedFileOpenCommand" date="Mon Nov 29 20:07:23 EST 2021" docASTNodeCount="95" docActiveCodeLength="571" docExpressionCount="68" docLength="571" projectName="Assignment5" starttimestamp="1638200531246" timestamp="33912403">
    <filePath><![CDATA[/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/Runner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mainPackage;¶import main.Main;¶import main.lisp.evaluator.ExpressionEvaluatorFactory;¶public class Runner {¶	public static void main(final String[] args) {¶		main.lisp.parser.terms.ExpressionFactory.setClass(BetterSExpression.class);¶		(new OperatorRegistry()).registerAll();;¶		main.lisp.evaluator.environment.EnvironmentFactory.setClass(EnvironmentImplementation.class);¶		main.lisp.parser.terms.IdentifierAtomFactory.setClass(IdentifierAtomImplementation.class);¶		ExpressionEvaluatorFactory.setClass(GeneralExpressionEvaluator.class);¶		Main.main(args);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="14433" _type="DiffBasedFileOpenCommand" date="Mon Nov 29 20:11:35 EST 2021" docASTNodeCount="303" docActiveCodeLength="2697" docExpressionCount="237" docLength="2697" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34164535">
    <filePath><![CDATA[/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/OperatorRegistry.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mainPackage;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import mainPackage.Expression.CondEvaluator;¶import mainPackage.Expression.EvalEvaluator;¶import mainPackage.Expression.ListEvaluator;¶import mainPackage.Expression.LoadEvaluator;¶import mainPackage.Expression.QuoteEvaluator;¶import mainPackage.Functional.FuncallEvaluator;¶import mainPackage.Functional.LambdaEvaluator;¶import mainPackage.Functional.SetqEvaluator;¶import mainPackage.Logical.AndEval;¶import mainPackage.Logical.NotEval;¶import mainPackage.Logical.OrEval;¶import mainPackage.Relational.GreaterThanEvaluator;¶import mainPackage.Relational.GreaterThanOrEqualToEvaluator;¶import mainPackage.Relational.LessThanEvaluator;¶import mainPackage.Relational.LessThanOrEqualToEvaluator;¶¶public class OperatorRegistry implements OperatorRegistryInterface  {¶¶	@Override¶	public void registerAll() {¶		registerOperations();¶	}¶	¶	@Override¶	public void registerOperations() {¶		BuiltinOperationManagerSingleton.get().registerEvaluator("<", new LessThanEvaluator());¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("<=", new LessThanOrEqualToEvaluator());¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">", new GreaterThanEvaluator());¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew(">=", new GreaterThanOrEqualToEvaluator());¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LOAD", new LoadEvaluator());¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("and", new AndEval()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("list", new ListEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("quote", new QuoteEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("EVAL", new EvalEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("or", new OrEval()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("not", new NotEval()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("COND", new CondEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("setq", new SetqEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("LAMBDA", new LambdaEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("funcall", new FuncallEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("function", new FunctionEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("let", new LetEvaluator()); ¶		BuiltinOperationManagerSingleton.get().registerEvaluatorIfNew("curry", new CurryEvaluator()); ¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="14626" _type="DiffBasedFileOpenCommand" date="Mon Nov 29 20:24:25 EST 2021" docASTNodeCount="244" docActiveCodeLength="1593" docExpressionCount="189" docLength="2384" projectName="Assignment5" starttimestamp="1638200531246" timestamp="34934150">
    <filePath><![CDATA[/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/Functional/FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mainPackage.Functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.BasicFunction;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtom;¶import mainPackage.FunctionApplicationEvaluator;¶import mainPackage.LambdaApplicationEvaluator;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(final SExpression expressionOriginal, final Environment environment) {¶		if (expressionOriginal.isAtom() || expressionOriginal.getTail().isAtom()) {¶			ExpressionFactory.newInstance(new TAtom(), new TAtom());¶			throw new RuntimeException("Bad Args");¶		}¶"), Diff(INSERT,"		System.out.println("F: " + expressionOriginal.getHead().toString());¶¶"), Diff(EQUAL,"¶		final SExpression expression = expressionOriginal.getTail();¶		"), Diff(DELETE,"//"), Diff(EQUAL,"System.out.println("E: " + expression."), Diff(INSERT,"getHead()."), Diff(EQUAL,"toString());¶		final SExpression evaluatedExpression = expression.getHead().eval(environment);¶		¶		if (evaluatedExpression instanceof BasicFunction) {¶			return FunctionApplicationEvaluator.helper((Function) evaluatedExpression, environment, expression);¶		}¶		System.out.println("UnEvaluated Expression: " + expressionOriginal.getTail().getHead().toString());¶		System.out.println("Evaluated Expression: " + evaluatedExpression.toString());¶		final Lambda lambda = (Lambda) evaluatedExpression;¶		return LambdaApplicationEvaluator.helper(lambda, environment, expression); // remove unneeded param¶	}¶¶}¶¶/*¶ * ¶ * package mainPackage;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression expression, Environment environment) {¶		if (expression.isAtom()) {¶			throw new RuntimeException("Bad Args");¶		}¶		if (expression.getTail().isAtom()) {¶			throw new RuntimeException("Bad Args");¶		}¶¶		expression = expression.getTail();¶		System.out.println("MILEN: " + expression.getHead().toString());¶		Lambda lambda = (Lambda) expression.getHead().eval(environment);¶¶		return (new LambdaApplicationEvaluator()).helper(lambda, environment, expression);¶	}¶¶}¶*/¶")]]]></diff>
    <snapshot><![CDATA[package mainPackage.Functional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.BasicFunction;
import main.lisp.evaluator.function.Function;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;
import mainPackage.FunctionApplicationEvaluator;
import mainPackage.LambdaApplicationEvaluator;

public class FuncallEvaluator implements Evaluator {

	@Override
	public SExpression eval(final SExpression expressionOriginal, final Environment environment) {
		if (expressionOriginal.isAtom() || expressionOriginal.getTail().isAtom()) {
			ExpressionFactory.newInstance(new TAtom(), new TAtom());
			throw new RuntimeException("Bad Args");
		}
		System.out.println("F: " + expressionOriginal.getHead().toString());


		final SExpression expression = expressionOriginal.getTail();
		System.out.println("E: " + expression.getHead().toString());
		final SExpression evaluatedExpression = expression.getHead().eval(environment);
		
		if (evaluatedExpression instanceof BasicFunction) {
			return FunctionApplicationEvaluator.helper((Function) evaluatedExpression, environment, expression);
		}
		System.out.println("UnEvaluated Expression: " + expressionOriginal.getTail().getHead().toString());
		System.out.println("Evaluated Expression: " + evaluatedExpression.toString());
		final Lambda lambda = (Lambda) evaluatedExpression;
		return LambdaApplicationEvaluator.helper(lambda, environment, expression); // remove unneeded param
	}

}

/*
 * 
 * package mainPackage;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.SExpression;

public class FuncallEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression expression, Environment environment) {
		if (expression.isAtom()) {
			throw new RuntimeException("Bad Args");
		}
		if (expression.getTail().isAtom()) {
			throw new RuntimeException("Bad Args");
		}

		expression = expression.getTail();
		System.out.println("MILEN: " + expression.getHead().toString());
		Lambda lambda = (Lambda) expression.getHead().eval(environment);

		return (new LambdaApplicationEvaluator()).helper(lambda, environment, expression);
	}

}
*/
]]></snapshot>
  </Command>
  <DocumentChange __id="14631" _type="Insert" date="Mon Nov 29 20:24:28 EST 2021" docASTNodeCount="231" docActiveCodeLength="1525" docExpressionCount="177" docLength="2386" length="2" offset="826" repeat="2" starttimestamp="1638200531246" timestamp="34936940" timestamp2="34937067">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14636" _type="Insert" date="Mon Nov 29 20:24:29 EST 2021" docASTNodeCount="216" docActiveCodeLength="1426" docExpressionCount="163" docLength="2388" length="2" offset="1274" repeat="2" starttimestamp="1638200531246" timestamp="34938569" timestamp2="34938695">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14641" _type="Insert" date="Mon Nov 29 20:24:30 EST 2021" docASTNodeCount="205" docActiveCodeLength="1348" docExpressionCount="153" docLength="2390" length="2" offset="1378" repeat="2" starttimestamp="1638200531246" timestamp="34939258" timestamp2="34939409">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14647" _type="Insert" date="Mon Nov 29 20:24:33 EST 2021" docASTNodeCount="192" docActiveCodeLength="1288" docExpressionCount="141" docLength="2392" length="2" offset="964" repeat="2" starttimestamp="1638200531246" timestamp="34941785" timestamp2="34941954">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14664" _type="Insert" date="Mon Nov 29 20:25:32 EST 2021" docASTNodeCount="192" docActiveCodeLength="1288" docExpressionCount="141" docLength="2393" length="1" offset="966" starttimestamp="1638200531246" timestamp="35000755">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="14667" _type="Delete" date="Mon Nov 29 20:25:33 EST 2021" docASTNodeCount="192" docActiveCodeLength="1288" docExpressionCount="141" docLength="2392" endLine="25" length="1" offset="966" startLine="25" starttimestamp="1638200531246" timestamp="35001841">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="14740" _type="Delete" date="Mon Nov 29 20:30:25 EST 2021" docASTNodeCount="205" docActiveCodeLength="1356" docExpressionCount="153" docLength="2390" endLine="21" length="2" offset="826" repeat="2" startLine="21" starttimestamp="1638200531246" timestamp="35293907" timestamp2="35294116">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14746" _type="Delete" date="Mon Nov 29 20:30:26 EST 2021" docASTNodeCount="218" docActiveCodeLength="1416" docExpressionCount="165" docLength="2388" endLine="25" length="2" offset="962" repeat="2" startLine="25" starttimestamp="1638200531246" timestamp="35295492" timestamp2="35295667">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14754" _type="Delete" date="Mon Nov 29 20:30:30 EST 2021" docASTNodeCount="233" docActiveCodeLength="1515" docExpressionCount="179" docLength="2386" endLine="31" length="2" offset="1272" repeat="2" startLine="31" starttimestamp="1638200531246" timestamp="35299595" timestamp2="35299772">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="14760" _type="Delete" date="Mon Nov 29 20:30:32 EST 2021" docASTNodeCount="244" docActiveCodeLength="1593" docExpressionCount="189" docLength="2384" endLine="32" length="2" offset="1374" repeat="2" startLine="32" starttimestamp="1638200531246" timestamp="35300893" timestamp2="35301067">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="14768" _type="DiffBasedFileOpenCommand" date="Mon Nov 29 20:30:36 EST 2021" docASTNodeCount="136" docActiveCodeLength="883" docExpressionCount="99" docLength="996" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35305731">
    <filePath><![CDATA[/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/GeneralExpressionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mainPackage;¶¶import main.lisp.evaluator.BasicExpressionEvaluator;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.SExpression;¶¶public class GeneralExpressionEvaluator extends BasicExpressionEvaluator implements Evaluator {¶	¶	@Override¶	public SExpression eval(final SExpression expression, final Environment environment) {¶		"), Diff(INSERT,"//"), Diff(EQUAL,"System.out.println("Evluating: " + expression.toString());¶		if (expression.isAtom() || expression.getHead().isAtom()) {¶			return super.eval(expression, environment);¶		}¶¶		// Evaluate the lambda¶		final SExpression label = expression.getHead().getHead();¶¶		if (!(label.toString().equalsIgnoreCase("lambda"))) {¶			return super.eval(expression, environment);¶		}¶¶		final Lambda lambda = (Lambda) expression.getHead().eval(environment);¶		return LambdaApplicationEvaluator.helper(lambda, environment, expression); // do i even need this function¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package mainPackage;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.SExpression;

public class GeneralExpressionEvaluator extends BasicExpressionEvaluator implements Evaluator {
	
	@Override
	public SExpression eval(final SExpression expression, final Environment environment) {
		//System.out.println("Evluating: " + expression.toString());
		if (expression.isAtom() || expression.getHead().isAtom()) {
			return super.eval(expression, environment);
		}

		// Evaluate the lambda
		final SExpression label = expression.getHead().getHead();

		if (!(label.toString().equalsIgnoreCase("lambda"))) {
			return super.eval(expression, environment);
		}

		final Lambda lambda = (Lambda) expression.getHead().eval(environment);
		return LambdaApplicationEvaluator.helper(lambda, environment, expression); // do i even need this function
	}
}
]]></snapshot>
  </Command>
  <Command __id="14770" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:30:37 EST 2021" starttimestamp="1638200531246" timestamp="35306053" />
  <Command __id="14771" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:30:37 EST 2021" starttimestamp="1638200531246" timestamp="35306058" />
  <Command __id="14772" _type="MoveCaretCommand" caretOffset="277" date="Mon Nov 29 20:30:37 EST 2021" docOffset="442" starttimestamp="1638200531246" timestamp="35306498" />
  <Command __id="14773" _type="MoveCaretCommand" caretOffset="276" date="Mon Nov 29 20:30:38 EST 2021" docOffset="441" starttimestamp="1638200531246" timestamp="35307370" />
  <Command __id="14774" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Nov 29 20:30:39 EST 2021" starttimestamp="1638200531246" timestamp="35307780" />
  <Command __id="14783" _type="PauseCommand" date="Mon Nov 29 20:30:42 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35310854">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2036]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14782" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:30:42 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35310854" type="Run" />
  <Command __id="14785" _type="PauseCommand" date="Mon Nov 29 20:30:48 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35317395">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6541]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14784" _type="ConsoleInput" date="Mon Nov 29 20:30:48 EST 2021" starttimestamp="1638200531246" timestamp="35317395" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14786" _type="ConsoleOutput" date="Mon Nov 29 20:30:48 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35317501" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X))))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"NIL"), Diff(INSERT,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X))))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14788" _type="PauseCommand" date="Mon Nov 29 20:30:57 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35326323">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8822]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14787" _type="ConsoleInput" date="Mon Nov 29 20:30:57 EST 2021" starttimestamp="1638200531246" timestamp="35326323" type="Exception">
    <outputString><![CDATA[(funcall isList (cons 5 Nil))
]]></outputString>
  </Command>
  <Command __id="14789" _type="ConsoleOutput" date="Mon Nov 29 20:30:57 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35326393" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))
Evluating: (CONS 5 NIL)
Evluating: (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))
Evluating: (ATOM X)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(INSERT,"FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X)"), Diff(INSERT,"COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶Evluating: (CONS 5 NIL)¶Evluating:"), Diff(EQUAL," (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))"), Diff(DELETE,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X))))))"), Diff(INSERT,"ATOM X)¶NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14791" _type="PauseCommand" date="Mon Nov 29 20:31:17 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="35346610">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20217]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14790" _type="ConsoleInput" date="Mon Nov 29 20:31:17 EST 2021" starttimestamp="1638200531246" timestamp="35346610" type="Exception">
    <outputString><![CDATA[(atom (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14792" _type="ConsoleOutput" date="Mon Nov 29 20:31:17 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35346666" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (ATOM (CONS 5 NIL))
Evluating: (CONS 5 NIL)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶Evluating: (ATOM X"), Diff(INSERT,"ATOM (CONS 5 NIL))¶Evluating: (CONS 5 NIL"), Diff(EQUAL,")¶NIL¶")]]]></diff>
  </Command>
  <Command __id="14794" _type="PauseCommand" date="Mon Nov 29 20:32:02 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35390961">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[44295]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14793" _type="ConsoleInput" date="Mon Nov 29 20:32:02 EST 2021" starttimestamp="1638200531246" timestamp="35390961" type="Exception">
    <outputString><![CDATA[(car (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14795" _type="ConsoleOutput" date="Mon Nov 29 20:32:02 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35391016" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (CAR (CONS 5 NIL))
Evluating: (CONS 5 NIL)
5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"ATOM"), Diff(INSERT,"CAR"), Diff(EQUAL," (CONS 5 NIL))¶Evluating: (CONS 5 NIL)¶"), Diff(DELETE,"NIL"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14797" _type="PauseCommand" date="Mon Nov 29 20:32:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35394330">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3314]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14796" _type="ConsoleInput" date="Mon Nov 29 20:32:05 EST 2021" starttimestamp="1638200531246" timestamp="35394330" type="Exception">
    <outputString><![CDATA[(cdr (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14798" _type="ConsoleOutput" date="Mon Nov 29 20:32:05 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35394387" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (CDR (CONS 5 NIL))
Evluating: (CONS 5 NIL)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (C"), Diff(DELETE,"A"), Diff(INSERT,"D"), Diff(EQUAL,"R (CONS 5 NIL))¶Evluating: (CONS 5 NIL)¶"), Diff(DELETE,"5"), Diff(INSERT,"NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14800" _type="PauseCommand" date="Mon Nov 29 20:32:16 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35404809">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10422]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14799" _type="ConsoleInput" date="Mon Nov 29 20:32:16 EST 2021" starttimestamp="1638200531246" timestamp="35404809" type="Exception">
    <outputString><![CDATA[(atom (cdr (cons 5 nil)))
]]></outputString>
  </Command>
  <Command __id="14801" _type="ConsoleOutput" date="Mon Nov 29 20:32:16 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35404867" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (ATOM (CDR (CONS 5 NIL)))
Evluating: (CDR (CONS 5 NIL))
Evluating: (CONS 5 NIL)
T
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Evluating: (ATOM (CDR (CONS 5 NIL)))¶"), Diff(EQUAL,"Evluating: (CDR (CONS 5 NIL))¶Evluating: (CONS 5 NIL)¶"), Diff(DELETE,"NIL"), Diff(INSERT,"T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14803" _type="PauseCommand" date="Mon Nov 29 20:32:27 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35416665">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11798]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14802" _type="ConsoleInput" date="Mon Nov 29 20:32:27 EST 2021" starttimestamp="1638200531246" timestamp="35416665" type="Exception">
    <outputString><![CDATA[(eq (cdr (cons 5 nil)) nil)
]]></outputString>
  </Command>
  <Command __id="14804" _type="ConsoleOutput" date="Mon Nov 29 20:32:27 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35416724" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (EQ (CDR (CONS 5 NIL)) NIL)
Evluating: (CDR (CONS 5 NIL))
Evluating: (CONS 5 NIL)
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"ATOM"), Diff(INSERT,"EQ"), Diff(EQUAL," (CDR (CONS 5 NIL))"), Diff(INSERT," NIL"), Diff(EQUAL,")¶Evluating: (CDR (CONS 5 NIL))¶Evluating: (CONS 5 NIL)¶T¶")]]]></diff>
  </Command>
  <Command __id="14806" _type="PauseCommand" date="Mon Nov 29 20:32:31 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35420292">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3568]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14805" _type="ShellCommand" date="Mon Nov 29 20:32:31 EST 2021" starttimestamp="1638200531246" timestamp="35420292" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14810" _type="PauseCommand" date="Mon Nov 29 20:32:39 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35427794">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1585]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="14809" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:32:39 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35427794" type="Run" />
  <Command __id="14812" _type="PauseCommand" date="Mon Nov 29 20:32:46 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35435442">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[7648]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14811" _type="ConsoleInput" date="Mon Nov 29 20:32:46 EST 2021" starttimestamp="1638200531246" timestamp="35435442" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14813" _type="ConsoleOutput" date="Mon Nov 29 20:32:46 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35435547" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X))))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"EQ (CDR (CONS 5 NIL)) NIL)¶Evluating: (CDR (CONS 5 NIL))¶Evluating: (CONS 5 NIL)¶T"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X))))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14815" _type="PauseCommand" date="Mon Nov 29 20:32:51 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35440569">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5022]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14814" _type="ConsoleInput" date="Mon Nov 29 20:32:51 EST 2021" starttimestamp="1638200531246" timestamp="35440569" type="Exception">
    <outputString><![CDATA[(funcall isList (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14816" _type="ConsoleOutput" date="Mon Nov 29 20:32:51 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35440637" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))
Evluating: (CONS 5 NIL)
Evluating: (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))
Evluating: (ATOM X)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(INSERT,"FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X)"), Diff(INSERT,"COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶Evluating: (CONS 5 NIL)¶Evluating:"), Diff(EQUAL," (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))"), Diff(DELETE,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"LAMBDA (X) (COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X))))))"), Diff(INSERT,"ATOM X)¶NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14818" _type="PauseCommand" date="Mon Nov 29 20:33:22 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35471011">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[30374]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14817" _type="ShellCommand" date="Mon Nov 29 20:33:22 EST 2021" starttimestamp="1638200531246" timestamp="35471011" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14820" _type="PauseCommand" date="Mon Nov 29 20:33:29 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35478456">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7445]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14819" _type="ShellCommand" date="Mon Nov 29 20:33:29 EST 2021" starttimestamp="1638200531246" timestamp="35478456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14821" _type="ShellCommand" date="Mon Nov 29 20:33:30 EST 2021" starttimestamp="1638200531246" timestamp="35479307" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14823" _type="PauseCommand" date="Mon Nov 29 20:34:08 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35516777">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[37470]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14822" _type="ShellCommand" date="Mon Nov 29 20:34:08 EST 2021" starttimestamp="1638200531246" timestamp="35516777" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14825" _type="PauseCommand" date="Mon Nov 29 20:34:13 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35521760">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4983]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14824" _type="ConsoleInput" date="Mon Nov 29 20:34:13 EST 2021" starttimestamp="1638200531246" timestamp="35521760" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14826" _type="ConsoleOutput" date="Mon Nov 29 20:34:13 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35521823" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND (((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))))
Evluating: (LAMBDA (X) (COND (((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"ISLIST"), Diff(INSERT,"TIMESGENERATOR"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"COND ((ATOM X) (EQ X NIL) (T (FUNCALL ISLIST (CDR X)))))¶Evluating: (CONS 5 NIL)¶Evluating:"), Diff(INSERT,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X)"), Diff(EQUAL," (COND "), Diff(INSERT,"("), Diff(EQUAL,"((ATOM X) (EQ X NIL)"), Diff(INSERT,")"), Diff(EQUAL," (T (FUNCALL ISLIST (CDR X)))))"), Diff(INSERT,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"ATOM X)¶NIL"), Diff(INSERT,"LAMBDA (X) (COND (((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14828" _type="PauseCommand" date="Mon Nov 29 20:34:19 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35527847">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6024]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14827" _type="ConsoleInput" date="Mon Nov 29 20:34:19 EST 2021" starttimestamp="1638200531246" timestamp="35527847" type="Exception">
    <outputString><![CDATA[(funcall isList (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14829" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:34:19 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35527863" type="Run" />
  <Command __id="14830" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:34:19 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35527863" type="Run" />
  <Command __id="14831" _type="ExceptionCommand" date="Mon Nov 29 20:34:19 EST 2021" starttimestamp="1638200531246" timestamp="35527901" type="Exception">
    <exceptionString><![CDATA[Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND (((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))
Evluating: (CONS 5 NIL)
Evluating: (COND (((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))
Evluating: ((ATOM X) (EQ X NIL))
Exception in thread "main" java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:22)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at mainPackage.Expression.CondEvaluator.eval(CondEvaluator.java:26)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at mainPackage.LambdaApplicationEvaluator.helper(LambdaApplicationEvaluator.java:20)
	at mainPackage.Functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at mainPackage.Runner.main(Runner.java:11)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="14833" _type="PauseCommand" date="Mon Nov 29 20:35:02 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35570862">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[42961]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14832" _type="ShellCommand" date="Mon Nov 29 20:35:02 EST 2021" starttimestamp="1638200531246" timestamp="35570862" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14835" _type="PauseCommand" date="Mon Nov 29 20:35:18 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35586811">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15949]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14834" _type="ShellCommand" date="Mon Nov 29 20:35:18 EST 2021" starttimestamp="1638200531246" timestamp="35586811" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14837" _type="PauseCommand" date="Mon Nov 29 20:35:19 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35588350">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1539]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14836" _type="ShellCommand" date="Mon Nov 29 20:35:19 EST 2021" starttimestamp="1638200531246" timestamp="35588350" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14839" _type="PauseCommand" date="Mon Nov 29 20:35:52 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35620868">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[32518]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14838" _type="ShellCommand" date="Mon Nov 29 20:35:52 EST 2021" starttimestamp="1638200531246" timestamp="35620868" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14841" _type="PauseCommand" date="Mon Nov 29 20:36:00 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35629479">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8611]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14842" _type="MoveCaretCommand" caretOffset="193" date="Mon Nov 29 20:36:01 EST 2021" docOffset="193" starttimestamp="1638200531246" timestamp="35630159" />
  <Command __id="14844" _type="PauseCommand" date="Mon Nov 29 20:36:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35634553">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4394]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14843" _type="ShellCommand" date="Mon Nov 29 20:36:05 EST 2021" starttimestamp="1638200531246" timestamp="35634553" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14860" _type="PauseCommand" date="Mon Nov 29 20:37:35 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35724448">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2328]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="14859" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:37:35 EST 2021" starttimestamp="1638200531246" timestamp="35724448" />
  <Command __id="14861" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:37:35 EST 2021" starttimestamp="1638200531246" timestamp="35724455" />
  <Command __id="14863" _type="PauseCommand" date="Mon Nov 29 20:37:39 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35728080">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3625]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14862" _type="ConsoleInput" date="Mon Nov 29 20:37:39 EST 2021" starttimestamp="1638200531246" timestamp="35728080" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14864" _type="ConsoleOutput" date="Mon Nov 29 20:37:39 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35728141" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND (("), Diff(DELETE,"("), Diff(EQUAL,"ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))"), Diff(DELETE,")"), Diff(EQUAL,"¶Evluating: (LAMBDA (X) (COND (("), Diff(DELETE,"("), Diff(EQUAL,"ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))"), Diff(DELETE,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14866" _type="PauseCommand" date="Mon Nov 29 20:37:48 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35737196">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9055]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14865" _type="ConsoleInput" date="Mon Nov 29 20:37:48 EST 2021" starttimestamp="1638200531246" timestamp="35737196" type="Exception">
    <outputString><![CDATA[(funcall isList (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="14867" _type="ConsoleOutput" date="Mon Nov 29 20:37:48 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35737267" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CONS 5 NIL)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2"), Diff(INSERT,"FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X)"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X)"), Diff(INSERT,"COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating:"), Diff(EQUAL," (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))"), Diff(DELETE,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))"), Diff(INSERT,"ATOM X)¶Evluating: (EQ X NIL)¶T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14869" _type="PauseCommand" date="Mon Nov 29 20:37:53 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35742024">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4757]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14868" _type="ShellCommand" date="Mon Nov 29 20:37:53 EST 2021" starttimestamp="1638200531246" timestamp="35742024" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14871" _type="PauseCommand" date="Mon Nov 29 20:38:02 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35751513">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9489]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14870" _type="ShellCommand" date="Mon Nov 29 20:38:02 EST 2021" starttimestamp="1638200531246" timestamp="35751513" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14872" _type="PasteCommand" date="Mon Nov 29 20:38:03 EST 2021" starttimestamp="1638200531246" timestamp="35752102" />
  <Command __id="14873" _type="ConsoleOutput" date="Mon Nov 29 20:38:03 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35752612" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST (LIST 2 3 (LIST 4 5)))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (LIST 2 3 (LIST 4 5))
Evluating: (LIST 4 5)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (FUNCALL ISLIST ("), Diff(DELETE,"CONS 5 NIL"), Diff(INSERT,"LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (LIST 2 3 (LIST 4 5))¶Evluating: (LIST 4 5)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X"), Diff(EQUAL,"))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (C"), Diff(DELETE,"ONS 5 NIL"), Diff(INSERT,"DR X"), Diff(EQUAL,")¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶T¶")]]]></diff>
  </Command>
  <Command __id="14874" _type="ShellCommand" date="Mon Nov 29 20:38:04 EST 2021" starttimestamp="1638200531246" timestamp="35753301" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14876" _type="PauseCommand" date="Mon Nov 29 20:38:07 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35756650">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3349]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14875" _type="ShellCommand" date="Mon Nov 29 20:38:07 EST 2021" starttimestamp="1638200531246" timestamp="35756650" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14878" _type="PauseCommand" date="Mon Nov 29 20:38:17 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35766725">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10075]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14879" _type="MoveCaretCommand" caretOffset="22" date="Mon Nov 29 20:38:18 EST 2021" docOffset="22" starttimestamp="1638200531246" timestamp="35767456" />
  <Command __id="14880" _type="RunCommand" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 20:38:19 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35768034" type="Run" />
  <Command __id="14881" _type="ShellCommand" date="Mon Nov 29 20:38:19 EST 2021" starttimestamp="1638200531246" timestamp="35768467" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14883" _type="PauseCommand" date="Mon Nov 29 20:38:27 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35775792">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7325]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="14882" _type="ConsoleOutput" date="Mon Nov 29 20:38:27 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35775792" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):16
Test execution time (ms):9
Test execution time (ms):11
Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")
Evluating: (SETQ A 29)
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL ISLIST (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (LIST 2 3 (LIST 4 5))¶Evluating: (LIST 4 5)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))"), Diff(INSERT,"Test execution time (ms):16¶Test execution time (ms):9¶Test execution time (ms):11¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"ATOM X"), Diff(INSERT,"+ A 13"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶T"), Diff(INSERT,"(LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14884" _type="ConsoleOutput" date="Mon Nov 29 20:38:27 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35775897" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
Number of traces > 600  turning tracing off
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
Evluating: (SETQ X 5)
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))
Test execution time (ms):63
Number of traces > 600  turning tracing off
Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CONS 5 NIL)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):16¶Test execution time (ms):9¶Test execution time (ms):11¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1))"), Diff(INSERT,"Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶Number of traces > 600  turning tracing off¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶Evluating: (SETQ X 5)¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))¶Test execution time (ms):63¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="14886" _type="PauseCommand" date="Mon Nov 29 20:39:03 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35811973">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[36076]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14885" _type="ShellCommand" date="Mon Nov 29 20:39:03 EST 2021" starttimestamp="1638200531246" timestamp="35811973" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14888" _type="PauseCommand" date="Mon Nov 29 20:39:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35813995">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2022]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14887" _type="ShellCommand" date="Mon Nov 29 20:39:05 EST 2021" starttimestamp="1638200531246" timestamp="35813995" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14890" _type="PauseCommand" date="Mon Nov 29 20:39:55 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="35863872">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[49877]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14889" _type="ShellCommand" date="Mon Nov 29 20:39:55 EST 2021" starttimestamp="1638200531246" timestamp="35863872" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14892" _type="PauseCommand" date="Mon Nov 29 20:39:57 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35866170">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2298]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14893" _type="MoveCaretCommand" caretOffset="512" date="Mon Nov 29 20:39:58 EST 2021" docOffset="567" starttimestamp="1638200531246" timestamp="35866914" />
  <Command __id="14894" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:39:58 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35867420" type="Run" />
  <Command __id="14896" _type="PauseCommand" date="Mon Nov 29 20:40:03 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35872706">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5286]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14895" _type="ConsoleInput" date="Mon Nov 29 20:40:03 EST 2021" starttimestamp="1638200531246" timestamp="35872706" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14897" _type="ConsoleOutput" date="Mon Nov 29 20:40:04 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35872776" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶"), Diff(EQUAL,"Evluating: (+ 41 (+ 0 1))¶"), Diff(DELETE,""), Diff(EQUAL,"Evluating: (+ 0 1)¶"), Diff(INSERT,"42¶"), Diff(EQUAL,"Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶"), Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"42"), Diff(EQUAL,"¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶"), Diff(INSERT,"42¶"), Diff(EQUAL,"Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶"), Diff(INSERT,"LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶"), Diff(EQUAL,"Evluating: (SETQ X 5)¶"), Diff(INSERT,"5¶"), Diff(EQUAL,"Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶"), Diff(INSERT,"LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶"), Diff(EQUAL,"Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶"), Diff(INSERT,"#<FUNCTION :LAMBDA (Y) (* X Y)>¶"), Diff(EQUAL,"Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶"), Diff(INSERT,"LAMBDA (X Y Z) (* X (* Y Z))¶"), Diff(EQUAL,"Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶"), Diff(INSERT,"LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶"), Diff(EQUAL,"Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶"), Diff(DELETE,"Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))¶Test execution time (ms):63¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X"), Diff(INSERT,"LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: "), Diff(INSERT,"(* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST ("), Diff(EQUAL,"LAMBDA (X) (COND ("), Diff(DELETE,"(ATOM X) "), Diff(EQUAL,"(EQ X NIL)"), Diff(INSERT," NIL"), Diff(EQUAL,") (T (FUNCALL ISLIST"), Diff(DELETE," (CD"), Diff(INSERT,"HELPE"), Diff(EQUAL,"R X))))"), Diff(INSERT,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"CDR X)¶Evluating: (COND ((ATOM X) "), Diff(INSERT,"LAMBDA (X) (COND ("), Diff(EQUAL,"(EQ X NIL)"), Diff(INSERT," NIL"), Diff(EQUAL,") (T (FUNCALL ISLIST"), Diff(DELETE," (CD"), Diff(INSERT,"HELPE"), Diff(EQUAL,"R X))))¶"), Diff(DELETE,"Evluating: (ATOM X)¶")]]]></diff>
  </Command>
  <Command __id="14904" _type="PauseCommand" date="Mon Nov 29 20:40:11 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35880102">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[4429]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="14903" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:40:11 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35880102" type="Run" />
  <Command __id="14905" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:40:11 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35880102" type="Run" />
  <Command __id="14907" _type="PauseCommand" date="Mon Nov 29 20:40:15 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35884001">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3899]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14906" _type="ConsoleInput" date="Mon Nov 29 20:40:15 EST 2021" starttimestamp="1638200531246" timestamp="35884001" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14908" _type="ConsoleOutput" date="Mon Nov 29 20:40:15 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35884069" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="14910" _type="PauseCommand" date="Mon Nov 29 20:40:18 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35886953">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2884]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14909" _type="ConsoleInput" date="Mon Nov 29 20:40:18 EST 2021" starttimestamp="1638200531246" timestamp="35886953" type="Exception">
    <outputString><![CDATA[(funcall isList nil)
]]></outputString>
  </Command>
  <Command __id="14911" _type="ConsoleOutput" date="Mon Nov 29 20:40:18 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35887016" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST NIL)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(INSERT,"FUNCALL ISLIST NIL)¶F: FUNCALL¶E: ISLIST"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATOR"), Diff(INSERT,"ISLIST"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X)"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating:"), Diff(EQUAL," (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))"), Diff(DELETE,"))"), Diff(EQUAL,"¶Evluating: "), Diff(DELETE,"(LAMBDA (X) (COND ("), Diff(EQUAL,"(EQ X NIL)"), Diff(DELETE," "), Diff(INSERT,"¶"), Diff(EQUAL,"NIL"), Diff(DELETE,") (T (FUNCALL ISLISTHELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14913" _type="PauseCommand" date="Mon Nov 29 20:40:20 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35889663">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2647]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14914" _type="MoveCaretCommand" caretOffset="22" date="Mon Nov 29 20:40:21 EST 2021" docOffset="22" starttimestamp="1638200531246" timestamp="35890403" />
  <Command __id="14915" _type="RunCommand" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 20:40:21 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35890746" type="Run" />
  <Command __id="14916" _type="ShellCommand" date="Mon Nov 29 20:40:22 EST 2021" starttimestamp="1638200531246" timestamp="35891167" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14918" _type="PauseCommand" date="Mon Nov 29 20:40:31 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35900300">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9133]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="14917" _type="ConsoleOutput" date="Mon Nov 29 20:40:31 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35900300" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):15
Test execution time (ms):9
Test execution time (ms):11
Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")
Evluating: (SETQ A 29)
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
Number of traces > 600  turning tracing off
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL ISLIST NIL)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(INSERT,"Test execution time (ms):15¶Test execution time (ms):9¶Test execution time (ms):11¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL)"), Diff(INSERT,"ing: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Number of traces > 600  turning tracing off¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating:"), Diff(EQUAL," ("), Diff(DELETE,"T"), Diff(INSERT,"*"), Diff(EQUAL," ("), Diff(DELETE,"FUNCALL ISLISTHELPER"), Diff(INSERT,"+ 1 1)"), Diff(EQUAL," X)"), Diff(DELETE,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"EQ X NIL)¶NIL"), Diff(INSERT,"+ 1 1)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14919" _type="ConsoleOutput" date="Mon Nov 29 20:40:31 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35900372" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
Evluating: (SETQ X 5)
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))
Test execution time (ms):61
Number of traces > 600  turning tracing off
Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (CDR X)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):15¶Test execution time (ms):9¶Test execution time (ms):11¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13"), Diff(INSERT,"Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶Evluating: (SETQ X 5)¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ A"), Diff(INSERT,"CURRY PRODUCT2"), Diff(EQUAL," 1"), Diff(DELETE,"3"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"(LAMBDA NIL (+ 41 (+ 0 1"), Diff(INSERT,"SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)"), Diff(EQUAL,"))))¶Evluating: (LAMBDA "), Diff(DELETE,"NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Number of traces > 600  turning tracing off¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1"), Diff(INSERT,"(X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))¶Test execution time (ms):61¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CDR X"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="14921" _type="PauseCommand" date="Mon Nov 29 20:40:39 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35908740">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8368]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14920" _type="ShellCommand" date="Mon Nov 29 20:40:39 EST 2021" starttimestamp="1638200531246" timestamp="35908740" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14923" _type="PauseCommand" date="Mon Nov 29 20:40:41 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35910206">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1465]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14924" _type="MoveCaretCommand" caretOffset="512" date="Mon Nov 29 20:40:42 EST 2021" docOffset="567" starttimestamp="1638200531246" timestamp="35910812" />
  <Command __id="14925" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:40:42 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35911439" type="Run" />
  <Command __id="14927" _type="PauseCommand" date="Mon Nov 29 20:40:45 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35913868">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2429]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14926" _type="ShellCommand" date="Mon Nov 29 20:40:45 EST 2021" starttimestamp="1638200531246" timestamp="35913868" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14929" _type="PauseCommand" date="Mon Nov 29 20:40:53 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35921935">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8067]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14928" _type="ShellCommand" date="Mon Nov 29 20:40:53 EST 2021" starttimestamp="1638200531246" timestamp="35921935" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14931" _type="PauseCommand" date="Mon Nov 29 20:41:01 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35929984">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8049]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14930" _type="ConsoleInput" date="Mon Nov 29 20:41:01 EST 2021" starttimestamp="1638200531246" timestamp="35929984" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14932" _type="ConsoleOutput" date="Mon Nov 29 20:41:01 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35930045" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶"), Diff(EQUAL,"Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶"), Diff(INSERT,"42¶"), Diff(EQUAL,"Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶"), Diff(INSERT,"LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶"), Diff(EQUAL,"Evluating: (SETQ X 5)¶"), Diff(INSERT,"5¶"), Diff(EQUAL,"Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶"), Diff(INSERT,"LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶"), Diff(EQUAL,"Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶"), Diff(INSERT,"#<FUNCTION :LAMBDA (Y) (* X Y)>¶"), Diff(EQUAL,"Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶"), Diff(INSERT,"LAMBDA (X Y Z) (* X (* Y Z))¶"), Diff(EQUAL,"Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶"), Diff(INSERT,"LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶"), Diff(EQUAL,"Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶"), Diff(INSERT,"LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶"), Diff(DELETE,"Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X)))))¶Test execution time (ms):61¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CDR X)¶")]]]></diff>
  </Command>
  <Command __id="14933" _type="ConsoleOutput" date="Mon Nov 29 20:41:02 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35930836" type="ConsoleOutput">
    <outputString><![CDATA[(funcall isList Nil)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))"), Diff(INSERT,"(funcall isList Nil"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="14934" _type="PasteCommand" date="Mon Nov 29 20:41:02 EST 2021" starttimestamp="1638200531246" timestamp="35930838" />
  <Command __id="14935" _type="ConsoleOutput" date="Mon Nov 29 20:41:02 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35930891" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST NIL)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(funcall isList Nil)"), Diff(INSERT,"Evluating: (FUNCALL ISLIST NIL)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14936" _type="ShellCommand" date="Mon Nov 29 20:41:02 EST 2021" starttimestamp="1638200531246" timestamp="35931627" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14938" _type="PauseCommand" date="Mon Nov 29 20:41:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35934216">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2589]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14937" _type="ShellCommand" date="Mon Nov 29 20:41:05 EST 2021" starttimestamp="1638200531246" timestamp="35934216" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14939" _type="ConsoleOutput" date="Mon Nov 29 20:41:06 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35934764" type="ConsoleOutput">
    <outputString><![CDATA[ (funcall isList (cons 5 Nil))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL ISLIST NIL)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶NIL"), Diff(INSERT," (funcall isList (cons 5 Nil))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14940" _type="PasteCommand" date="Mon Nov 29 20:41:06 EST 2021" starttimestamp="1638200531246" timestamp="35934767" />
  <Command __id="14941" _type="ConsoleOutput" date="Mon Nov 29 20:41:06 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35934820" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLIST (CDR X))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (CDR X)
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
NIL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," (funcall isList (cons 5 Nil))"), Diff(INSERT,"Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CDR X)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶NIL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14943" _type="PauseCommand" date="Mon Nov 29 20:41:28 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="35957160">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22340]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14942" _type="ShellCommand" date="Mon Nov 29 20:41:28 EST 2021" starttimestamp="1638200531246" timestamp="35957160" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14945" _type="PauseCommand" date="Mon Nov 29 20:41:37 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35966022">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8862]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14944" _type="ShellCommand" date="Mon Nov 29 20:41:37 EST 2021" starttimestamp="1638200531246" timestamp="35966022" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14947" _type="PauseCommand" date="Mon Nov 29 20:41:38 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="35967047">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1025]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14948" _type="MoveCaretCommand" caretOffset="22" date="Mon Nov 29 20:41:39 EST 2021" docOffset="22" starttimestamp="1638200531246" timestamp="35967780" />
  <Command __id="14949" _type="RunCommand" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 20:41:39 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35967916" type="Run" />
  <Command __id="14950" _type="ShellCommand" date="Mon Nov 29 20:41:39 EST 2021" starttimestamp="1638200531246" timestamp="35968389" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14952" _type="PauseCommand" date="Mon Nov 29 20:41:45 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="35974486">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6097]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="14951" _type="ConsoleOutput" date="Mon Nov 29 20:41:45 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35974486" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):15
Test execution time (ms):9
Test execution time (ms):11
Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLIST (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLIST (CDR X))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CDR X)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶NIL"), Diff(INSERT,"Test execution time (ms):15¶Test execution time (ms):9¶Test execution time (ms):11¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14953" _type="ConsoleOutput" date="Mon Nov 29 20:41:45 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="35974596" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (SETQ A 29)
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
Number of traces > 600  turning tracing off
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
Evluating: (SETQ X 5)
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))
Test execution time (ms):84
Number of traces > 600  turning tracing off
Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):15¶Test execution time (ms):9¶Test execution time (ms):11¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp""), Diff(INSERT,"Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Number of traces > 600  turning tracing off¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶Evluating: (SETQ X 5)¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))¶Test execution time (ms):84¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="14955" _type="PauseCommand" date="Mon Nov 29 20:42:01 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="35990740">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16144]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14954" _type="ShellCommand" date="Mon Nov 29 20:42:01 EST 2021" starttimestamp="1638200531246" timestamp="35990740" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14957" _type="PauseCommand" date="Mon Nov 29 20:42:05 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="35994170">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3430]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="14958" _type="MoveCaretCommand" caretOffset="512" date="Mon Nov 29 20:42:06 EST 2021" docOffset="567" starttimestamp="1638200531246" timestamp="35994829" />
  <Command __id="14959" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:42:06 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="35995409" type="Run" />
  <Command __id="14961" _type="PauseCommand" date="Mon Nov 29 20:42:11 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36000584">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5175]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14960" _type="ConsoleInput" date="Mon Nov 29 20:42:11 EST 2021" starttimestamp="1638200531246" timestamp="36000584" type="Exception">
    <outputString><![CDATA[(print 5)
]]></outputString>
  </Command>
  <Command __id="14962" _type="ConsoleOutput" date="Mon Nov 29 20:42:11 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36000652" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (PRINT 5)
5
5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Number of traces > 600  turning tracing off¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶Evluating: (SETQ X 5)¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))¶Test execution time (ms):84¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)"), Diff(INSERT,"PRINT 5)¶5¶5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14964" _type="PauseCommand" date="Mon Nov 29 20:42:20 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36009565">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8913]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14963" _type="ShellCommand" date="Mon Nov 29 20:42:20 EST 2021" starttimestamp="1638200531246" timestamp="36009565" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14966" _type="PauseCommand" date="Mon Nov 29 20:42:34 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36023058">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13493]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14965" _type="ShellCommand" date="Mon Nov 29 20:42:34 EST 2021" starttimestamp="1638200531246" timestamp="36023058" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14968" _type="PauseCommand" date="Mon Nov 29 20:42:37 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36026672">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3614]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14967" _type="ShellCommand" date="Mon Nov 29 20:42:37 EST 2021" starttimestamp="1638200531246" timestamp="36026672" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14970" _type="PauseCommand" date="Mon Nov 29 20:44:04 EST 2021" range="1m-2m" starttimestamp="1638200531246" timestamp="36113434">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[86762]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14969" _type="ShellCommand" date="Mon Nov 29 20:44:04 EST 2021" starttimestamp="1638200531246" timestamp="36113434" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14972" _type="MoveCaretCommand" caretOffset="1931" date="Mon Nov 29 20:44:05 EST 2021" docOffset="1931" starttimestamp="1638200531246" timestamp="36114529" />
  <Command __id="14974" _type="PauseCommand" date="Mon Nov 29 20:44:09 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36117845">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3316]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14973" _type="ShellCommand" date="Mon Nov 29 20:44:09 EST 2021" starttimestamp="1638200531246" timestamp="36117845" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14976" _type="PauseCommand" date="Mon Nov 29 20:44:26 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36135567">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[17722]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14975" _type="ShellCommand" date="Mon Nov 29 20:44:26 EST 2021" starttimestamp="1638200531246" timestamp="36135567" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14978" _type="InsertStringCommand" date="Mon Nov 29 20:44:27 EST 2021" starttimestamp="1638200531246" timestamp="36136431" timestamp2="36136431">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="14981" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Nov 29 20:44:28 EST 2021" starttimestamp="1638200531246" timestamp="36137123" />
  <Command __id="14982" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Mon Nov 29 20:44:28 EST 2021" starttimestamp="1638200531246" timestamp="36137743" />
  <Command __id="14989" _type="PauseCommand" date="Mon Nov 29 20:44:34 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36143724">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3272]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="14988" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:44:34 EST 2021" starttimestamp="1638200531246" timestamp="36143724" />
  <Command __id="14990" _type="EclipseCommand" commandID="" date="Mon Nov 29 20:44:34 EST 2021" starttimestamp="1638200531246" timestamp="36143729" />
  <Command __id="14992" _type="PauseCommand" date="Mon Nov 29 20:44:36 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36145245">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1516]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14991" _type="ConsoleInput" date="Mon Nov 29 20:44:36 EST 2021" starttimestamp="1638200531246" timestamp="36145245" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="14993" _type="ConsoleOutput" date="Mon Nov 29 20:44:36 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36145304" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"PRINT 5)¶5¶5"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="14995" _type="PauseCommand" date="Mon Nov 29 20:44:39 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36147898">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2594]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14994" _type="ShellCommand" date="Mon Nov 29 20:44:39 EST 2021" starttimestamp="1638200531246" timestamp="36147898" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="14997" _type="PauseCommand" date="Mon Nov 29 20:44:47 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36156125">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8227]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="14996" _type="ShellCommand" date="Mon Nov 29 20:44:47 EST 2021" starttimestamp="1638200531246" timestamp="36156125" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14999" _type="PauseCommand" date="Mon Nov 29 20:44:52 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36161701">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5576]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="14998" _type="ConsoleInput" date="Mon Nov 29 20:44:52 EST 2021" starttimestamp="1638200531246" timestamp="36161701" type="Exception">
    <outputString><![CDATA[(toString (cons 5 nil))
]]></outputString>
  </Command>
  <Command __id="15000" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:44:52 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36161722" type="Run" />
  <Command __id="15001" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:44:52 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36161722" type="Run" />
  <Command __id="15002" _type="ExceptionCommand" date="Mon Nov 29 20:44:53 EST 2021" starttimestamp="1638200531246" timestamp="36161758" type="Exception">
    <exceptionString><![CDATA[Evluating: (TOSTRING (CONS 5 NIL))
Exception in thread "main" java.lang.IllegalStateException: No evaluator registered for operator 'TOSTRING'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at mainPackage.Runner.main(Runner.java:11)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="15004" _type="PauseCommand" date="Mon Nov 29 20:44:55 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36164324">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2566]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15003" _type="ShellCommand" date="Mon Nov 29 20:44:55 EST 2021" starttimestamp="1638200531246" timestamp="36164324" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15006" _type="PauseCommand" date="Mon Nov 29 20:45:02 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36170982">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6658]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15005" _type="ShellCommand" date="Mon Nov 29 20:45:02 EST 2021" starttimestamp="1638200531246" timestamp="36170982" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15008" _type="PauseCommand" date="Mon Nov 29 20:45:18 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36187645">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16663]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15007" _type="ShellCommand" date="Mon Nov 29 20:45:18 EST 2021" starttimestamp="1638200531246" timestamp="36187645" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15012" _type="PauseCommand" date="Mon Nov 29 20:52:03 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36592132">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1575]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15011" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:52:03 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36592132" type="Run" />
  <Command __id="15013" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:52:03 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36592132" type="Run" />
  <Command __id="15015" _type="PauseCommand" date="Mon Nov 29 20:52:07 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36596200">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4068]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15014" _type="ConsoleInput" date="Mon Nov 29 20:52:07 EST 2021" starttimestamp="1638200531246" timestamp="36596200" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15016" _type="ConsoleOutput" date="Mon Nov 29 20:52:07 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36596312" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15018" _type="PauseCommand" date="Mon Nov 29 20:52:09 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36598167">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1855]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15017" _type="ShellCommand" date="Mon Nov 29 20:52:09 EST 2021" starttimestamp="1638200531246" timestamp="36598167" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15020" _type="PauseCommand" date="Mon Nov 29 20:52:27 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36616213">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18046]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15019" _type="ShellCommand" date="Mon Nov 29 20:52:27 EST 2021" starttimestamp="1638200531246" timestamp="36616213" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15021" _type="PasteCommand" date="Mon Nov 29 20:52:28 EST 2021" starttimestamp="1638200531246" timestamp="36617059" />
  <Command __id="15022" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:52:28 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36617507" type="Run" />
  <Command __id="15023" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:52:28 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36617507" type="Run" />
  <Command __id="15024" _type="ExceptionCommand" date="Mon Nov 29 20:52:28 EST 2021" starttimestamp="1638200531246" timestamp="36617536" type="Exception">
    <exceptionString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 NIL))
F: FUNCALL
Exception in thread "main" E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (ISLIST X)
java.lang.IllegalStateException: No evaluator registered for operator 'ISLIST'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at mainPackage.Expression.CondEvaluator.eval(CondEvaluator.java:26)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at mainPackage.LambdaApplicationEvaluator.helper(LambdaApplicationEvaluator.java:20)
	at mainPackage.Functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at mainPackage.GeneralExpressionEvaluator.eval(GeneralExpressionEvaluator.java:15)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at mainPackage.Runner.main(Runner.java:11)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="15026" _type="PauseCommand" date="Mon Nov 29 20:52:36 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36624916">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[7380]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15025" _type="ShellCommand" date="Mon Nov 29 20:52:36 EST 2021" starttimestamp="1638200531246" timestamp="36624916" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15030" _type="PauseCommand" date="Mon Nov 29 20:52:47 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36635803">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1351]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15029" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:52:47 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36635803" type="Run" />
  <Command __id="15031" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:52:47 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36635803" type="Run" />
  <Command __id="15033" _type="PauseCommand" date="Mon Nov 29 20:52:50 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36639492">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3689]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15032" _type="ConsoleInput" date="Mon Nov 29 20:52:50 EST 2021" starttimestamp="1638200531246" timestamp="36639492" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15034" _type="ConsoleOutput" date="Mon Nov 29 20:52:50 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36639552" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15036" _type="PauseCommand" date="Mon Nov 29 20:52:52 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36641295">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1743]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="15035" _type="PasteCommand" date="Mon Nov 29 20:52:52 EST 2021" starttimestamp="1638200531246" timestamp="36641295" />
  <Command __id="15037" _type="ConsoleOutput" date="Mon Nov 29 20:52:53 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36642068" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 NIL))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
UnEvaluated Expression: TOSTRINGASLIST
Evaluated Expression: LAMBDA (X) "not yet done"
"not yet done"
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(INSERT,"FUNCALL TOSTRING (CONS 5 NIL))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ A 13)¶42¶42"), Diff(INSERT,"ed Expression: TOSTRING"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X"), Diff(INSERT,"CONS 5 NIL)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"T"), Diff(EQUAL," ("), Diff(DELETE,"+ 1 1)"), Diff(INSERT,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(EQUAL," X))"), Diff(INSERT,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶"), Diff(INSERT,"FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶"), Diff(INSERT,"ed Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ X 5)¶5"), Diff(INSERT,"ed Expression: ISLISTHELPER"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ TIMESGENERATOR ("), Diff(INSERT,"ed Expression: "), Diff(EQUAL,"LAMBDA (X) ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y"), Diff(INSERT,"(ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"Y)))))¶Evluating: (LAMBDA (X) (FUNCTI"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y"), Diff(INSERT,"(ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X"), Diff(EQUAL,")¶Evluating: (FUNCALL "), Diff(DELETE,"TIMESGENERATOR 2"), Diff(INSERT,"ISLISTHELPER (CDR X)"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"TIMESGENERATO"), Diff(INSERT,"ISLISTHELPE"), Diff(EQUAL,"R¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATO"), Diff(INSERT,"ISLISTHELPE"), Diff(EQUAL,"R¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y"), Diff(INSERT,"COND ((ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"(* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))"), Diff(INSERT,"ed Expression: TOSTRINGASLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing"), Diff(INSERT,"ed Expression"), Diff(EQUAL,": "), Diff(DELETE,"("), Diff(EQUAL,"LAMBDA (X) "), Diff(DELETE,"(COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(INSERT,""not yet done"¶"not yet done""), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15039" _type="PauseCommand" date="Mon Nov 29 20:52:54 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36643379">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1311]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15038" _type="ShellCommand" date="Mon Nov 29 20:52:54 EST 2021" starttimestamp="1638200531246" timestamp="36643379" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15041" _type="PauseCommand" date="Mon Nov 29 20:53:11 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36659949">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16570]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15040" _type="ShellCommand" date="Mon Nov 29 20:53:11 EST 2021" starttimestamp="1638200531246" timestamp="36659949" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15043" _type="PauseCommand" date="Mon Nov 29 20:53:14 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36663634">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3685]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="15042" _type="PasteCommand" date="Mon Nov 29 20:53:14 EST 2021" starttimestamp="1638200531246" timestamp="36663634" />
  <Command __id="15044" _type="ConsoleOutput" date="Mon Nov 29 20:53:15 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36664176" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 6))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 6)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)
F: FUNCALL
E: TOSTRINGASSEXPRESSION
UnEvaluated Expression: TOSTRINGASSEXPRESSION
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))))
Evluating: (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))))
Evluating: (ATOM X)
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRING (CAR X))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CAR X)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (FUNCALL TOSTRING (CONS 5 "), Diff(DELETE,"NIL"), Diff(INSERT,"6"), Diff(EQUAL,"))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CONS 5 "), Diff(DELETE,"NIL"), Diff(INSERT,"6"), Diff(EQUAL,")¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGAS"), Diff(DELETE,"LIST"), Diff(INSERT,"SEXPRESSION"), Diff(EQUAL," X)¶F: FUNCALL¶E: TOSTRINGAS"), Diff(DELETE,"LIST"), Diff(INSERT,"SEXPRESSION"), Diff(EQUAL,"¶UnEvaluated Expression: TOSTRINGAS"), Diff(DELETE,"LIST"), Diff(INSERT,"SEXPRESSION"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) "), Diff(DELETE,""not yet done"¶"not yet done""), Diff(INSERT,"(COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))))¶Evluating: (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRING (CAR X))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15046" _type="PauseCommand" date="Mon Nov 29 20:53:17 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36666255">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2079]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15045" _type="ShellCommand" date="Mon Nov 29 20:53:17 EST 2021" starttimestamp="1638200531246" timestamp="36666255" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15048" _type="PauseCommand" date="Mon Nov 29 20:53:19 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36668397">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2142]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15047" _type="ShellCommand" date="Mon Nov 29 20:53:19 EST 2021" starttimestamp="1638200531246" timestamp="36668397" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15050" _type="PauseCommand" date="Mon Nov 29 20:53:22 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36671450">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3053]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15049" _type="ShellCommand" date="Mon Nov 29 20:53:22 EST 2021" starttimestamp="1638200531246" timestamp="36671450" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15054" _type="PauseCommand" date="Mon Nov 29 20:53:39 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36688358">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2871]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="15053" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:53:39 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36688358" type="Run" />
  <Command __id="15056" _type="PauseCommand" date="Mon Nov 29 20:53:43 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36691962">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3604]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15055" _type="ConsoleInput" date="Mon Nov 29 20:53:43 EST 2021" starttimestamp="1638200531246" timestamp="36691962" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15057" _type="ConsoleOutput" date="Mon Nov 29 20:53:43 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36692067" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (CONS 5 6))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING"), Diff(INSERT,"ing: (+ A 13)¶42¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X"), Diff(INSERT,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"CONS 5 6"), Diff(INSERT,"+ 41 (+ 0 1)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST "), Diff(INSERT,"+ 0 1)¶42¶Evluating: ((LAMBDA ("), Diff(EQUAL,"X)"), Diff(DELETE,")"), Diff(EQUAL," ("), Diff(DELETE,"T"), Diff(INSERT,"*"), Diff(EQUAL," ("), Diff(DELETE,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(INSERT,"+ 1 1)"), Diff(EQUAL," X))"), Diff(INSERT," 21"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLIST"), Diff(INSERT,"LAMBDA (X) (* (+ 1 1)"), Diff(EQUAL," X)"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"F: FUNCALL¶E: ISLIST¶Un"), Diff(INSERT,"Evluating: (* (+ 1 1) X)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLIST"), Diff(INSERT,"ing: (+ 1 1)¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (("), Diff(EQUAL,"LAMBDA (X"), Diff(INSERT," Y"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(INSERT,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"EQ"), Diff(INSERT,"+"), Diff(EQUAL," X "), Diff(DELETE,"NIL"), Diff(INSERT,"(+ Y 0)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(INSERT,"+ Y 0)¶42¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)"), Diff(INSERT,"ing: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"CDR X)"), Diff(INSERT,"SETQ X 5)¶5"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL"), Diff(INSERT,"SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(EQUAL,")¶Evluating: (FUNCALL T"), Diff(DELETE,"OSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION"), Diff(INSERT,"IMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(EQUAL,"¶UnEvaluated Expression: T"), Diff(DELETE,"OSTRINGASSEXPRESSION"), Diff(INSERT,"IMESGENERATOR"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"C"), Diff(INSERT,"FUNCTI"), Diff(EQUAL,"ON"), Diff(DELETE,"D"), Diff(EQUAL," ("), Diff(DELETE,"(ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))))"), Diff(INSERT,"LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)))¶Evluating:"), Diff(INSERT,"SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))"), Diff(EQUAL," (QUOTE "), Diff(DELETE,"STRING"), Diff(INSERT,"1) Y Z"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (CAR X))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"SETQ IDENTITY (CURRY PRODUCT2 1))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING¶Evaluated Expression: "), Diff(INSERT,"ing: (CURRY PRODUCT2 1)¶"), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"X"), Diff(INSERT,"Z"), Diff(EQUAL,") "), Diff(DELETE,"(COND ("), Diff(EQUAL,"(FUNCALL "), Diff(DELETE,"ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: "), Diff(INSERT,"(QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T ("), Diff(EQUAL,"FUNCALL"), Diff(DELETE,"¶E:"), Diff(EQUAL," ISLIST"), Diff(DELETE,"¶UnEvaluated Expression: ISLIST"), Diff(INSERT,"HELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15059" _type="PauseCommand" date="Mon Nov 29 20:53:44 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36693354">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1287]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15058" _type="ShellCommand" date="Mon Nov 29 20:53:44 EST 2021" starttimestamp="1638200531246" timestamp="36693354" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15061" _type="PauseCommand" date="Mon Nov 29 20:53:45 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36694717">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1363]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15060" _type="ShellCommand" date="Mon Nov 29 20:53:45 EST 2021" starttimestamp="1638200531246" timestamp="36694717" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15062" _type="PasteCommand" date="Mon Nov 29 20:53:46 EST 2021" starttimestamp="1638200531246" timestamp="36695475" />
  <Command __id="15063" _type="ConsoleOutput" date="Mon Nov 29 20:53:47 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36696209" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 6))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 6)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)
F: FUNCALL
E: TOSTRINGASSEXPRESSION
UnEvaluated Expression: TOSTRINGASSEXPRESSION
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (ATOM X)
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRING (CAR X))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CAR X)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(INSERT,"FUNCALL TOSTRING (CONS 5 6))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ A 13)¶42¶42"), Diff(INSERT,"ed Expression: TOSTRING"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 0 1)¶42"), Diff(INSERT,"CONS 5 6)"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"(LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X"), Diff(INSERT,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"T"), Diff(EQUAL," ("), Diff(DELETE,"+ 1 1)"), Diff(INSERT,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(EQUAL," X))"), Diff(INSERT,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"* (+ 1 1) X)¶"), Diff(INSERT,"FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ 1 1)¶42"), Diff(INSERT,"ed Expression: ISLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (("), Diff(INSERT,"ed Expression: "), Diff(EQUAL,"LAMBDA (X"), Diff(DELETE," Y"), Diff(EQUAL,") ("), Diff(DELETE,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"+"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"(+ Y 0)"), Diff(INSERT,"NIL"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+ Y 0)¶42¶"), Diff(INSERT,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30"), Diff(INSERT,"ed Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"SETQ X 5)¶5"), Diff(INSERT,"CDR X)"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(INSERT,"COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL"), Diff(EQUAL,")¶Evluating: (FUNCALL T"), Diff(DELETE,"IMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(INSERT,"OSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION"), Diff(EQUAL,"¶UnEvaluated Expression: T"), Diff(DELETE,"IMESGENERATOR"), Diff(INSERT,"OSTRINGASSEXPRESSION"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(INSERT,"(ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))"), Diff(INSERT,"COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating:"), Diff(EQUAL," (QUOTE "), Diff(DELETE,"1) Y Z"), Diff(INSERT,"STRING"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"SETQ IDENTITY (CURRY PRODUCT2 1))¶"), Diff(INSERT,"FUNCALL TOSTRING (CAR X))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (CURRY PRODUCT2 1)¶"), Diff(INSERT,"ed Expression: TOSTRING¶Evaluated Expression: "), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"Z"), Diff(INSERT,"X"), Diff(EQUAL,") "), Diff(INSERT,"(COND ("), Diff(EQUAL,"(FUNCALL "), Diff(DELETE,"(QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T ("), Diff(INSERT,"ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: "), Diff(EQUAL,"FUNCALL"), Diff(INSERT,"¶E:"), Diff(EQUAL," ISLIST"), Diff(DELETE,"HELPER X))))"), Diff(INSERT,"¶UnEvaluated Expression: ISLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15064" _type="ShellCommand" date="Mon Nov 29 20:53:48 EST 2021" starttimestamp="1638200531246" timestamp="36696981" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15066" _type="PauseCommand" date="Mon Nov 29 20:53:49 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36698343">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1362]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15065" _type="ShellCommand" date="Mon Nov 29 20:53:49 EST 2021" starttimestamp="1638200531246" timestamp="36698343" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15068" _type="PauseCommand" date="Mon Nov 29 20:53:50 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36699685">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1342]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="15067" _type="PasteCommand" date="Mon Nov 29 20:53:50 EST 2021" starttimestamp="1638200531246" timestamp="36699685" />
  <Command __id="15070" _type="PauseCommand" date="Mon Nov 29 20:53:53 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36702315">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2630]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15069" _type="ConsoleOutput" date="Mon Nov 29 20:53:53 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36702315" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 6))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 6)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)
F: FUNCALL
E: TOSTRINGASSEXPRESSION
UnEvaluated Expression: TOSTRINGASSEXPRESSION
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (ATOM X)
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRING (CAR X))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CAR X)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (FUNCALL TOSTRING (CONS 5 6))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CONS 5 6)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION¶UnEvaluated Expression: TOSTRINGASSEXPRESSION¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRING (CAR X))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶")]]]></diff>
  </Command>
  <Command __id="15072" _type="PauseCommand" date="Mon Nov 29 20:53:57 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36706412">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4097]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15071" _type="ShellCommand" date="Mon Nov 29 20:53:57 EST 2021" starttimestamp="1638200531246" timestamp="36706412" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15076" _type="PauseCommand" date="Mon Nov 29 20:54:03 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36712538">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1202]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="15075" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 20:54:03 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36712538" type="Run" />
  <Command __id="15078" _type="PauseCommand" date="Mon Nov 29 20:54:08 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36717099">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4561]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15077" _type="ConsoleInput" date="Mon Nov 29 20:54:08 EST 2021" starttimestamp="1638200531246" timestamp="36717099" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15079" _type="ConsoleOutput" date="Mon Nov 29 20:54:08 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36717204" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (CONS 5 6))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING"), Diff(INSERT,"ing: (+ A 13)¶42¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X"), Diff(INSERT,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"CONS 5 6"), Diff(INSERT,"+ 41 (+ 0 1)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(INSERT,"+ 0 1)¶42¶Evluating: ((LAMBDA (X"), Diff(EQUAL,") ("), Diff(DELETE,"T"), Diff(INSERT,"*"), Diff(EQUAL," ("), Diff(DELETE,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(INSERT,"+ 1 1)"), Diff(EQUAL," X))"), Diff(INSERT," 21"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLIST"), Diff(INSERT,"LAMBDA (X) (* (+ 1 1)"), Diff(EQUAL," X)"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"F: FUNCALL¶E: ISLIST¶Un"), Diff(INSERT,"Evluating: (* (+ 1 1) X)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLIST"), Diff(INSERT,"ing: (+ 1 1)¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (("), Diff(EQUAL,"LAMBDA (X"), Diff(INSERT," Y"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(INSERT,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"EQ"), Diff(INSERT,"+"), Diff(EQUAL," X "), Diff(DELETE,"NIL"), Diff(INSERT,"(+ Y 0)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)"), Diff(INSERT,"+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"CDR X)"), Diff(INSERT,"SETQ X 5)¶5"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL"), Diff(INSERT,"SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(EQUAL,")¶Evluating: (FUNCALL T"), Diff(DELETE,"OSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION"), Diff(INSERT,"IMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(EQUAL,"¶UnEvaluated Expression: T"), Diff(DELETE,"OSTRINGASSEXPRESSION"), Diff(INSERT,"IMESGENERATOR"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"C"), Diff(INSERT,"FUNCTI"), Diff(EQUAL,"ON"), Diff(DELETE,"D"), Diff(EQUAL," ("), Diff(DELETE,"(ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))"), Diff(INSERT,"LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"COND ((ATOM X) (WRITE-TO-STRING 4)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating:"), Diff(INSERT,"SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))"), Diff(EQUAL," (QUOTE "), Diff(DELETE,"STRING"), Diff(INSERT,"1) Y Z"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (CAR X))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"SETQ IDENTITY (CURRY PRODUCT2 1))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING¶Evaluated Expression: "), Diff(INSERT,"ing: (CURRY PRODUCT2 1)¶"), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"X"), Diff(INSERT,"Z"), Diff(EQUAL,") "), Diff(DELETE,"(COND ("), Diff(EQUAL,"(FUNCALL "), Diff(DELETE,"ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: "), Diff(INSERT,"(QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T ("), Diff(EQUAL,"FUNCALL"), Diff(DELETE,"¶E:"), Diff(EQUAL," ISLIST"), Diff(DELETE,"¶UnEvaluated Expression: ISLIST"), Diff(INSERT,"HELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15080" _type="PasteCommand" date="Mon Nov 29 20:54:08 EST 2021" starttimestamp="1638200531246" timestamp="36717671" />
  <Command __id="15081" _type="ConsoleOutput" date="Mon Nov 29 20:54:09 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36718184" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 6))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 6)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)
F: FUNCALL
E: TOSTRINGASSEXPRESSION
UnEvaluated Expression: TOSTRINGASSEXPRESSION
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (ATOM X)
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRING (CAR X))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CAR X)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(INSERT,"FUNCALL TOSTRING (CONS 5 6))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ A 13)¶42¶42"), Diff(INSERT,"ed Expression: TOSTRING"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"+ 41 (+ 0 1)"), Diff(INSERT,"CONS 5 6"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+ 0 1)¶42¶Evluating: ((LAMBDA (X"), Diff(INSERT,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"T"), Diff(EQUAL," ("), Diff(DELETE,"+ 1 1)"), Diff(INSERT,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(EQUAL," X))"), Diff(DELETE," 21"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"LAMBDA (X) (* (+ 1 1)"), Diff(INSERT,"FUNCALL ISLIST"), Diff(EQUAL," X)"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Evluating: (* (+ 1 1) X)¶"), Diff(INSERT,"F: FUNCALL¶E: ISLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ 1 1)¶42"), Diff(INSERT,"ed Expression: ISLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (("), Diff(INSERT,"ed Expression: "), Diff(EQUAL,"LAMBDA (X"), Diff(DELETE," Y"), Diff(EQUAL,") ("), Diff(DELETE,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"+"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"(+ Y 0)"), Diff(INSERT,"NIL"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30"), Diff(INSERT,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"SETQ X 5)¶5"), Diff(INSERT,"CDR X)"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(INSERT,"COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL"), Diff(EQUAL,")¶Evluating: (FUNCALL T"), Diff(DELETE,"IMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(INSERT,"OSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION"), Diff(EQUAL,"¶UnEvaluated Expression: T"), Diff(DELETE,"IMESGENERATOR"), Diff(INSERT,"OSTRINGASSEXPRESSION"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(INSERT,"(ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))"), Diff(INSERT,"COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating:"), Diff(EQUAL," (QUOTE "), Diff(DELETE,"1) Y Z"), Diff(INSERT,"STRING"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"SETQ IDENTITY (CURRY PRODUCT2 1))¶"), Diff(INSERT,"FUNCALL TOSTRING (CAR X))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (CURRY PRODUCT2 1)¶"), Diff(INSERT,"ed Expression: TOSTRING¶Evaluated Expression: "), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"Z"), Diff(INSERT,"X"), Diff(EQUAL,") "), Diff(INSERT,"(COND ("), Diff(EQUAL,"(FUNCALL "), Diff(DELETE,"(QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T ("), Diff(INSERT,"ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: "), Diff(EQUAL,"FUNCALL"), Diff(INSERT,"¶E:"), Diff(EQUAL," ISLIST"), Diff(DELETE,"HELPER X))))"), Diff(INSERT,"¶UnEvaluated Expression: ISLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15083" _type="PauseCommand" date="Mon Nov 29 20:54:10 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36719598">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1414]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15082" _type="ShellCommand" date="Mon Nov 29 20:54:10 EST 2021" starttimestamp="1638200531246" timestamp="36719598" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15085" _type="PauseCommand" date="Mon Nov 29 20:54:16 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36725206">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5608]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15084" _type="ShellCommand" date="Mon Nov 29 20:54:16 EST 2021" starttimestamp="1638200531246" timestamp="36725206" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15087" _type="PauseCommand" date="Mon Nov 29 20:54:18 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36727147">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1941]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="15086" _type="PasteCommand" date="Mon Nov 29 20:54:18 EST 2021" starttimestamp="1638200531246" timestamp="36727147" />
  <Command __id="15088" _type="ConsoleOutput" date="Mon Nov 29 20:54:18 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36727600" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 4 (CONS 5 6)))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 4 (CONS 5 6))
Evluating: (CONS 5 6)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)
F: FUNCALL
E: TOSTRINGASSEXPRESSION
UnEvaluated Expression: TOSTRINGASSEXPRESSION
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (ATOM X)
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRING (CAR X))
F: FUNCALL
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (FUNCALL TOSTRING (CONS "), Diff(INSERT,"4 (CONS "), Diff(EQUAL,"5 6))"), Diff(INSERT,")"), Diff(EQUAL,"¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶"), Diff(INSERT,"Evluating: (CONS 4 (CONS 5 6))¶"), Diff(EQUAL,"Evluating: (CONS 5 6)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶"), Diff(INSERT,"Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶"), Diff(EQUAL,"Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION¶UnEvaluated Expression: TOSTRINGASSEXPRESSION¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRING (CAR X))¶"), Diff(INSERT,""), Diff(EQUAL,"F: FUNCALL¶"), Diff(DELETE,"E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CAR X)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶")]]]></diff>
  </Command>
  <Command __id="15089" _type="ShellCommand" date="Mon Nov 29 20:54:19 EST 2021" starttimestamp="1638200531246" timestamp="36728564" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15091" _type="PauseCommand" date="Mon Nov 29 20:54:20 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36729643">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1079]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15090" _type="ShellCommand" date="Mon Nov 29 20:54:20 EST 2021" starttimestamp="1638200531246" timestamp="36729643" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15093" _type="PauseCommand" date="Mon Nov 29 20:54:22 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36731115">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1472]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15092" _type="ShellCommand" date="Mon Nov 29 20:54:22 EST 2021" starttimestamp="1638200531246" timestamp="36731115" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15095" _type="PauseCommand" date="Mon Nov 29 20:54:23 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36732131">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1016]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15094" _type="ShellCommand" date="Mon Nov 29 20:54:23 EST 2021" starttimestamp="1638200531246" timestamp="36732131" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15097" _type="PauseCommand" date="Mon Nov 29 20:54:24 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36733633">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1502]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="15098" _type="MoveCaretCommand" caretOffset="22" date="Mon Nov 29 20:54:25 EST 2021" docOffset="22" starttimestamp="1638200531246" timestamp="36734353" />
  <Command __id="15099" _type="RunCommand" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 20:54:26 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36734774" type="Run" />
  <Command __id="15100" _type="ShellCommand" date="Mon Nov 29 20:54:26 EST 2021" starttimestamp="1638200531246" timestamp="36735193" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15102" _type="PauseCommand" date="Mon Nov 29 20:54:34 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="36743210">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8017]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15101" _type="ConsoleOutput" date="Mon Nov 29 20:54:34 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36743210" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):15
Test execution time (ms):10
Test execution time (ms):12
Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")
Evluating: (SETQ A 29)
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL TOSTRING (CONS 4 (CONS 5 6)))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CONS 4 (CONS 5 6))¶Evluating: (CONS 5 6)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION¶UnEvaluated Expression: TOSTRINGASSEXPRESSION¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRING (CAR X))¶F: FUNCALL"), Diff(INSERT,"Test execution time (ms):15¶Test execution time (ms):10¶Test execution time (ms):12¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15103" _type="ConsoleOutput" date="Mon Nov 29 20:54:34 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="36743274" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
Evluating: (SETQ X 5)
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))
Evluating: (SETQ TOSTRINGASSEXPRESSION (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")"))))
Evluating: (SETQ TOSTRINGASLIST (LAMBDA (X) "not yet done"))
Evluating: (LAMBDA (X) "not yet done")
Evluating: (SETQ TOSTRING (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))))
Evluating: (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X))))
Test execution time (ms):67
Number of traces > 600  turning tracing off
Evluating: (FUNCALL ISLIST (CONS 5 NIL))
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (CONS 5 NIL)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):15¶Test execution time (ms):10¶Test execution time (ms):12¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13"), Diff(INSERT,"Number of traces > 600  turning tracing off¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶Evluating: (SETQ X 5)¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))¶Evluating: (SETQ TOSTRINGASSEXPRESSION (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")"))))¶Evluating: (SETQ TOSTRINGASLIST (LAMBDA (X) "not yet done"))¶Evluating: (LAMBDA (X) "not yet done")¶Evluating: (SETQ TOSTRING (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))))¶Evluating: (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X))))¶Test execution time (ms):67¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL"), Diff(EQUAL,")¶")]]]></diff>
  </Command>
  <Command __id="15105" _type="PauseCommand" date="Mon Nov 29 20:54:38 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36746775">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3501]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15104" _type="ShellCommand" date="Mon Nov 29 20:54:38 EST 2021" starttimestamp="1638200531246" timestamp="36746775" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15106" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 20:54:38 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36746793" type="Run" />
  <Command __id="15107" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 20:54:38 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="36746793" type="Run" />
  <Command __id="15109" _type="PauseCommand" date="Mon Nov 29 20:54:39 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36748297">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1504]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15108" _type="ShellCommand" date="Mon Nov 29 20:54:39 EST 2021" starttimestamp="1638200531246" timestamp="36748297" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15111" _type="PauseCommand" date="Mon Nov 29 20:54:50 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36759099">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10802]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15110" _type="ShellCommand" date="Mon Nov 29 20:54:50 EST 2021" starttimestamp="1638200531246" timestamp="36759099" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15112" _type="ShellCommand" date="Mon Nov 29 20:54:50 EST 2021" starttimestamp="1638200531246" timestamp="36759510" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15114" _type="PauseCommand" date="Mon Nov 29 20:55:01 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="36770657">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11147]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15113" _type="ShellCommand" date="Mon Nov 29 20:55:01 EST 2021" starttimestamp="1638200531246" timestamp="36770657" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15116" _type="PauseCommand" date="Mon Nov 29 20:55:03 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="36772160">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1503]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15115" _type="ShellCommand" date="Mon Nov 29 20:55:03 EST 2021" starttimestamp="1638200531246" timestamp="36772160" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15118" _type="PauseCommand" date="Mon Nov 29 20:55:27 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="36796673">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[24513]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15117" _type="ShellCommand" date="Mon Nov 29 20:55:27 EST 2021" starttimestamp="1638200531246" timestamp="36796673" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15120" _type="PauseCommand" date="Mon Nov 29 20:55:32 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36801641">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4968]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15119" _type="ShellCommand" date="Mon Nov 29 20:55:32 EST 2021" starttimestamp="1638200531246" timestamp="36801641" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15122" _type="PauseCommand" date="Mon Nov 29 20:56:57 EST 2021" range="1m-2m" starttimestamp="1638200531246" timestamp="36886391">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[84750]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15121" _type="ShellCommand" date="Mon Nov 29 20:56:57 EST 2021" starttimestamp="1638200531246" timestamp="36886391" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15124" _type="PauseCommand" date="Mon Nov 29 20:56:59 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="36888659">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2268]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="15125" _type="MoveCaretCommand" caretOffset="1451" date="Mon Nov 29 20:57:00 EST 2021" docOffset="1451" starttimestamp="1638200531246" timestamp="36889374" />
  <Command __id="15127" _type="PauseCommand" date="Mon Nov 29 20:57:39 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="36928254">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[38880]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15126" _type="ShellCommand" date="Mon Nov 29 20:57:39 EST 2021" starttimestamp="1638200531246" timestamp="36928254" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15129" _type="PauseCommand" date="Mon Nov 29 20:58:46 EST 2021" range="1m-2m" starttimestamp="1638200531246" timestamp="36995093">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[66839]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15128" _type="ShellCommand" date="Mon Nov 29 20:58:46 EST 2021" starttimestamp="1638200531246" timestamp="36995093" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15131" _type="PauseCommand" date="Mon Nov 29 20:58:52 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37001405">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6312]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15130" _type="ShellCommand" date="Mon Nov 29 20:58:52 EST 2021" starttimestamp="1638200531246" timestamp="37001405" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15133" _type="PauseCommand" date="Mon Nov 29 20:59:03 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37012507">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11102]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15132" _type="ShellCommand" date="Mon Nov 29 20:59:03 EST 2021" starttimestamp="1638200531246" timestamp="37012507" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15135" _type="PauseCommand" date="Mon Nov 29 20:59:07 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37015986">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3479]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15134" _type="ShellCommand" date="Mon Nov 29 20:59:07 EST 2021" starttimestamp="1638200531246" timestamp="37015986" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15137" _type="PauseCommand" date="Mon Nov 29 21:02:01 EST 2021" range="2m-5m" starttimestamp="1638200531246" timestamp="37190689">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[174703]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15136" _type="ShellCommand" date="Mon Nov 29 21:02:01 EST 2021" starttimestamp="1638200531246" timestamp="37190689" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15139" _type="PauseCommand" date="Mon Nov 29 21:02:04 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37193145">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2456]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15138" _type="ShellCommand" date="Mon Nov 29 21:02:04 EST 2021" starttimestamp="1638200531246" timestamp="37193145" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15141" _type="PauseCommand" date="Mon Nov 29 21:02:37 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="37226539">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[33394]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15140" _type="ShellCommand" date="Mon Nov 29 21:02:37 EST 2021" starttimestamp="1638200531246" timestamp="37226539" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15143" _type="PauseCommand" date="Mon Nov 29 21:02:38 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37227748">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1209]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15142" _type="ShellCommand" date="Mon Nov 29 21:02:38 EST 2021" starttimestamp="1638200531246" timestamp="37227748" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15145" _type="PauseCommand" date="Mon Nov 29 21:02:46 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37235223">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7475]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15144" _type="ShellCommand" date="Mon Nov 29 21:02:46 EST 2021" starttimestamp="1638200531246" timestamp="37235223" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15147" _type="PauseCommand" date="Mon Nov 29 21:02:50 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37239536">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4313]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15146" _type="ShellCommand" date="Mon Nov 29 21:02:50 EST 2021" starttimestamp="1638200531246" timestamp="37239536" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15149" _type="PauseCommand" date="Mon Nov 29 21:02:54 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37243100">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3564]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="15148" _type="BalloonCommand" date="Mon Nov 29 21:02:54 EST 2021" message="*******************************************
Worked 21 minutes(fixed)/57 minutes(context based) from
Mon Nov 29 20:02:54 EST 2021 to Mon Nov 29 21:02:50 EST 2021
Edited 1 Projects: 
	Assignment5
Edited 4 Files: 
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/Expression/CondEvaluator.java
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/GeneralExpressionEvaluator.java
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/BetterSExpression.java
	/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/src/mainPackage/Functional/FuncallEvaluator.java
Number of insert: 13
Number of delete: 15
" starttimestamp="1638200531246" timestamp="37243100">
    <fineGrainedWorkTime><![CDATA[57]]></fineGrainedWorkTime>
    <insert><![CDATA[13]]></insert>
    <startTime><![CDATA[1638234174359]]></startTime>
    <endTime><![CDATA[1638237770782]]></endTime>
    <workTime><![CDATA[21]]></workTime>
    <delete><![CDATA[15]]></delete>
  </Command>
  <Command __id="15153" _type="PauseCommand" date="Mon Nov 29 21:03:15 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37263847">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1316]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15152" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 21:03:15 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37263847" type="Run" />
  <Command __id="15154" _type="RunCommand" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 21:03:15 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37263847" type="Run" />
  <Command __id="15156" _type="PauseCommand" date="Mon Nov 29 21:03:16 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37264945">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1098]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15155" _type="ShellCommand" date="Mon Nov 29 21:03:16 EST 2021" starttimestamp="1638200531246" timestamp="37264945" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15158" _type="PauseCommand" date="Mon Nov 29 21:03:19 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37267864">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2919]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15157" _type="ShellCommand" date="Mon Nov 29 21:03:19 EST 2021" starttimestamp="1638200531246" timestamp="37267864" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15159" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 21:03:19 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37267886" type="Run" />
  <Command __id="15160" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 21:03:19 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37267886" type="Run" />
  <Command __id="15162" _type="PauseCommand" date="Mon Nov 29 21:03:20 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37269197">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1311]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="15163" _type="MoveCaretCommand" caretOffset="512" date="Mon Nov 29 21:03:21 EST 2021" docOffset="567" starttimestamp="1638200531246" timestamp="37269852" />
  <Command __id="15164" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:03:21 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37270450" type="Run" />
  <Command __id="15165" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:03:21 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37270450" type="Run" />
  <Command __id="15167" _type="PauseCommand" date="Mon Nov 29 21:03:27 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37275967">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5517]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15166" _type="ConsoleInput" date="Mon Nov 29 21:03:27 EST 2021" starttimestamp="1638200531246" timestamp="37275967" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15168" _type="ConsoleOutput" date="Mon Nov 29 21:03:27 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37276026" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off"), Diff(INSERT,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42"), Diff(EQUAL,"¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶"), Diff(INSERT,"42¶"), Diff(EQUAL,"Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶"), Diff(INSERT,"42¶"), Diff(EQUAL,"Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶"), Diff(INSERT,"42¶"), Diff(EQUAL,"Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶"), Diff(INSERT,"LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶"), Diff(EQUAL,"Evluating: (SETQ X 5)¶"), Diff(INSERT,"5¶"), Diff(EQUAL,"Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶"), Diff(INSERT,"LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶"), Diff(EQUAL,"Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶"), Diff(INSERT,"#<FUNCTION :LAMBDA (Y) (* X Y)>¶"), Diff(EQUAL,"Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶"), Diff(INSERT,"LAMBDA (X Y Z) (* X (* Y Z))¶"), Diff(EQUAL,"Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶"), Diff(INSERT,"LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶"), Diff(EQUAL,"Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶"), Diff(INSERT,"LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶"), Diff(EQUAL,"Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶"), Diff(DELETE,"Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))¶Evluating: (SETQ TOSTRINGASSEXPRESSION (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))))¶Evluating: (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")"))))¶Evluating: (SETQ TOSTRINGASLIST (LAMBDA (X) "not yet done"))¶Evluating: (LAMBDA (X) "not yet done")¶Evluating: (SETQ TOSTRING (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))))¶Evluating: (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X))))¶Test execution time (ms):67¶Number of traces > 600  turning tracing off¶Evluating: (FUNCALL ISLIST (CONS 5 NIL))¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (CONS 5 NIL)¶")]]]></diff>
  </Command>
  <Command __id="15170" _type="PauseCommand" date="Mon Nov 29 21:03:30 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37279173">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3147]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15169" _type="ShellCommand" date="Mon Nov 29 21:03:30 EST 2021" starttimestamp="1638200531246" timestamp="37279173" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15172" _type="PauseCommand" date="Mon Nov 29 21:04:58 EST 2021" range="1m-2m" starttimestamp="1638200531246" timestamp="37367340">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[88167]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15171" _type="ShellCommand" date="Mon Nov 29 21:04:58 EST 2021" starttimestamp="1638200531246" timestamp="37367340" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15174" _type="PauseCommand" date="Mon Nov 29 21:05:07 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37376193">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8853]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15173" _type="ShellCommand" date="Mon Nov 29 21:05:07 EST 2021" starttimestamp="1638200531246" timestamp="37376193" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15176" _type="PauseCommand" date="Mon Nov 29 21:05:09 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37377816">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1623]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15175" _type="ShellCommand" date="Mon Nov 29 21:05:09 EST 2021" starttimestamp="1638200531246" timestamp="37377816" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15177" _type="ConsoleInput" date="Mon Nov 29 21:05:09 EST 2021" starttimestamp="1638200531246" timestamp="37378378" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15179" _type="PauseCommand" date="Mon Nov 29 21:05:11 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37380448">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[2070]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15178" _type="ShellCommand" date="Mon Nov 29 21:05:11 EST 2021" starttimestamp="1638200531246" timestamp="37380448" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15181" _type="PauseCommand" date="Mon Nov 29 21:05:26 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37395259">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14811]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15180" _type="ShellCommand" date="Mon Nov 29 21:05:26 EST 2021" starttimestamp="1638200531246" timestamp="37395259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15182" _type="MoveCaretCommand" caretOffset="516" date="Mon Nov 29 21:05:27 EST 2021" docOffset="571" starttimestamp="1638200531246" timestamp="37396139" />
  <Command __id="15183" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:05:27 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37396497" type="Run" />
  <Command __id="15185" _type="PauseCommand" date="Mon Nov 29 21:05:34 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37403748">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[7251]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15184" _type="ConsoleInput" date="Mon Nov 29 21:05:34 EST 2021" starttimestamp="1638200531246" timestamp="37403748" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15186" _type="ConsoleOutput" date="Mon Nov 29 21:05:35 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37403852" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15188" _type="PauseCommand" date="Mon Nov 29 21:05:40 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37409425">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5573]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="15187" _type="PasteCommand" date="Mon Nov 29 21:05:40 EST 2021" starttimestamp="1638200531246" timestamp="37409425" />
  <Command __id="15190" _type="PauseCommand" date="Mon Nov 29 21:05:44 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37413267">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3842]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15189" _type="ShellCommand" date="Mon Nov 29 21:05:44 EST 2021" starttimestamp="1638200531246" timestamp="37413267" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15192" _type="PauseCommand" date="Mon Nov 29 21:05:47 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37415995">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2728]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15191" _type="ShellCommand" date="Mon Nov 29 21:05:47 EST 2021" starttimestamp="1638200531246" timestamp="37415995" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15196" _type="PauseCommand" date="Mon Nov 29 21:05:51 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37420164">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[2279]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="15195" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:05:51 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37420164" type="Run" />
  <Command __id="15197" _type="ShellCommand" date="Mon Nov 29 21:05:52 EST 2021" starttimestamp="1638200531246" timestamp="37420954" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15198" _type="ShellCommand" date="Mon Nov 29 21:05:52 EST 2021" starttimestamp="1638200531246" timestamp="37421529" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15200" _type="PauseCommand" date="Mon Nov 29 21:05:57 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37426583">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5054]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15199" _type="ConsoleInput" date="Mon Nov 29 21:05:57 EST 2021" starttimestamp="1638200531246" timestamp="37426583" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15201" _type="ConsoleOutput" date="Mon Nov 29 21:05:57 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37426650" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15203" _type="PauseCommand" date="Mon Nov 29 21:06:00 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37429577">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2927]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15202" _type="ConsoleInput" date="Mon Nov 29 21:06:00 EST 2021" starttimestamp="1638200531246" timestamp="37429577" type="Exception">
    <outputString><![CDATA[(+ 5 4)
]]></outputString>
  </Command>
  <Command __id="15204" _type="ShellCommand" date="Mon Nov 29 21:06:01 EST 2021" starttimestamp="1638200531246" timestamp="37430286" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15206" _type="PauseCommand" date="Mon Nov 29 21:06:30 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="37458907">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28621]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15205" _type="ShellCommand" date="Mon Nov 29 21:06:30 EST 2021" starttimestamp="1638200531246" timestamp="37458907" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15207" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:06:31 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37459825" type="Run" />
  <Command __id="15209" _type="PauseCommand" date="Mon Nov 29 21:06:36 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37464761">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4936]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15208" _type="ConsoleInput" date="Mon Nov 29 21:06:36 EST 2021" starttimestamp="1638200531246" timestamp="37464761" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15210" _type="ConsoleOutput" date="Mon Nov 29 21:06:36 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37464827" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15218" _type="PauseCommand" date="Mon Nov 29 21:06:41 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37470162">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2072]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15217" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:06:41 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37470162" type="Run" />
  <Command __id="15219" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:06:41 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37470162" type="Run" />
  <Command __id="15221" _type="PauseCommand" date="Mon Nov 29 21:06:47 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37475830">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5668]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15220" _type="ConsoleInput" date="Mon Nov 29 21:06:47 EST 2021" starttimestamp="1638200531246" timestamp="37475830" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15222" _type="ConsoleOutput" date="Mon Nov 29 21:06:47 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37475895" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15226" _type="PauseCommand" date="Mon Nov 29 21:06:50 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37479592">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1983]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15225" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:06:50 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37479592" type="Run" />
  <Command __id="15227" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:06:50 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37479592" type="Run" />
  <Command __id="15228" _type="ExceptionCommand" date="Mon Nov 29 21:06:50 EST 2021" starttimestamp="1638200531246" timestamp="37479637" type="Exception">
    <exceptionString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 NIL))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
UnEvaluated Expression: TOSTRINGASLIST
Evaluated Expression: LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRINGASLISTHELPER X)
F: FUNCALL
E: TOSTRINGASLISTHELPER
UnEvaluated Expression: TOSTRINGASLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING X))) (T "pussy"))
Evluating: (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING X))) (T "pussy"))
Evluating: (ATOM (CDR X))
Evluating: (CDR X)
Evluating: (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING X))
Evluating: (QUOTE STRING)
Evluating: (WRITE-TO-STRING X)
Exception in thread "main" java.lang.IllegalStateException: Argument for operator 'write-to-string' must be an atom
	at main.lisp.evaluator.string.WriteToStringEvaluator.eval(WriteToStringEvaluator.java:28)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="15230" _type="PauseCommand" date="Mon Nov 29 21:07:01 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37490738">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[11101]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15229" _type="ShellCommand" date="Mon Nov 29 21:07:01 EST 2021" starttimestamp="1638200531246" timestamp="37490738" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15234" _type="PauseCommand" date="Mon Nov 29 21:07:31 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37520513">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2619]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15233" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:07:31 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37520513" type="Run" />
  <Command __id="15235" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:07:31 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37520513" type="Run" />
  <Command __id="15237" _type="PauseCommand" date="Mon Nov 29 21:07:36 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37524859">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4346]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15236" _type="ConsoleInput" date="Mon Nov 29 21:07:36 EST 2021" starttimestamp="1638200531246" timestamp="37524859" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15238" _type="ConsoleOutput" date="Mon Nov 29 21:07:36 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37524924" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))¶")]]]></diff>
  </Command>
  <Command __id="15239" _type="PasteCommand" date="Mon Nov 29 21:07:36 EST 2021" starttimestamp="1638200531246" timestamp="37525511" />
  <Command __id="15240" _type="ConsoleOutput" date="Mon Nov 29 21:07:37 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37526369" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 5 NIL))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 5 NIL)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
UnEvaluated Expression: TOSTRINGASLIST
Evaluated Expression: LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRINGASLISTHELPER X)
F: FUNCALL
E: TOSTRINGASLISTHELPER
UnEvaluated Expression: TOSTRINGASLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))) (T "pussy"))
Evluating: (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))) (T "pussy"))
Evluating: (ATOM (CDR X))
Evluating: (CDR X)
Evluating: (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))
Evluating: (QUOTE STRING)
Evluating: (WRITE-TO-STRING (CAR X))
Evluating: (CAR X)
"( 5)"
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(INSERT,"FUNCALL TOSTRING (CONS 5 NIL))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ A 13)¶42¶42"), Diff(INSERT,"ed Expression: TOSTRING"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 0 1)¶42"), Diff(INSERT,"CONS 5 NIL)"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"(LAMBDA (X) (* (+ 1 1)"), Diff(INSERT,"COND ((FUNCALL ISLIST"), Diff(EQUAL," X)"), Diff(DELETE,")"), Diff(EQUAL," "), Diff(DELETE,"21)¶Evluating: (LAMBDA (X"), Diff(INSERT,"(FUNCALL TOSTRINGASLIST X)"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"T"), Diff(EQUAL," ("), Diff(DELETE,"+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶"), Diff(INSERT,"FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ 1 1)¶42"), Diff(INSERT,"ed Expression: ISLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (("), Diff(INSERT,"ed Expression: "), Diff(EQUAL,"LAMBDA (X"), Diff(DELETE," Y"), Diff(EQUAL,") ("), Diff(DELETE,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"+"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"(+ Y 0)"), Diff(INSERT,"NIL"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+ Y 0)¶42¶"), Diff(INSERT,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))"), Diff(INSERT,"ed Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"SET"), Diff(INSERT,"E"), Diff(EQUAL,"Q X "), Diff(DELETE,"5)¶5"), Diff(INSERT,"NIL)"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))"), Diff(INSERT,"FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST¶UnEvaluated Expression: TOSTRINGASLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing"), Diff(INSERT,"ed Expression"), Diff(EQUAL,": "), Diff(DELETE,"("), Diff(EQUAL,"LAMBDA (X) ("), Diff(DELETE,"FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(INSERT,"CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")¶Evluating: (QUOTE STRING"), Diff(EQUAL,")¶Evluating: (FUNCALL T"), Diff(DELETE,"IMESGENERATOR 2"), Diff(INSERT,"OSTRINGASLISTHELPER X"), Diff(EQUAL,")¶F: FUNCALL¶E: T"), Diff(DELETE,"IMESGENERATO"), Diff(INSERT,"OSTRINGASLISTHELPE"), Diff(EQUAL,"R¶UnEvaluated Expression: T"), Diff(DELETE,"IMESGENERATO"), Diff(INSERT,"OSTRINGASLISTHELPE"), Diff(EQUAL,"R¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(INSERT,"(ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))) (T "pussy"))¶Evluating: (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))) (T "pussy"))¶Evluating: (ATOM (CDR X))¶Evluating: (CDR X)¶Evluating: (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))¶Evluating: (QUOTE STRING)¶Evluating: (WRITE-TO-STRING (CAR X))¶Evluating: (CAR X)¶"( 5)""), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15242" _type="PauseCommand" date="Mon Nov 29 21:07:40 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37529180">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2811]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15241" _type="ShellCommand" date="Mon Nov 29 21:07:40 EST 2021" starttimestamp="1638200531246" timestamp="37529180" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15244" _type="PauseCommand" date="Mon Nov 29 21:07:42 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37530993">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1813]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15243" _type="ShellCommand" date="Mon Nov 29 21:07:42 EST 2021" starttimestamp="1638200531246" timestamp="37530993" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15246" _type="PauseCommand" date="Mon Nov 29 21:07:45 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37533848">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2855]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15245" _type="ShellCommand" date="Mon Nov 29 21:07:45 EST 2021" starttimestamp="1638200531246" timestamp="37533848" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15248" _type="PauseCommand" date="Mon Nov 29 21:07:53 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37542000">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8152]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15247" _type="ShellCommand" date="Mon Nov 29 21:07:53 EST 2021" starttimestamp="1638200531246" timestamp="37542000" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15250" _type="PauseCommand" date="Mon Nov 29 21:07:54 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37543234">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1234]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15249" _type="ConsoleOutput" date="Mon Nov 29 21:07:54 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37543234" type="ConsoleOutput">
    <outputString><![CDATA[ (funcall toString (List 2 3 (list 4 5)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL TOSTRING (CONS 5 NIL))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (CONS 5 NIL)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluat"), Diff(INSERT," (funcall toStr"), Diff(EQUAL,"ing"), Diff(DELETE,":"), Diff(EQUAL," ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST¶UnEvaluated Expression: TOSTRINGASLIST¶Evaluated Expression: LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRINGASLISTHELPER X)¶F: FUNCALL¶E: TOSTRINGASLISTHELPER¶UnEvaluated Expression: TOSTRINGASLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))) (T "pussy"))¶Evluating: (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))) (T "pussy"))¶Evluating: (ATOM (CDR X))¶Evluating: (CDR X)¶Evluating: (CONCATENATE (QUOTE STRING) " " (WRITE-TO-STRING (CAR X)))¶Evluating: (QUOTE STRING)¶Evluating: (WRITE-TO-STRING (CAR X))¶Evluating: (CAR X)¶"( 5)""), Diff(INSERT,"List 2 3 (list 4 5)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15251" _type="PasteCommand" date="Mon Nov 29 21:07:54 EST 2021" starttimestamp="1638200531246" timestamp="37543239" />
  <Command __id="15252" _type="ConsoleOutput" date="Mon Nov 29 21:07:54 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37543293" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (LIST 2 3 (LIST 4 5))
Evluating: (LIST 4 5)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," (funcall toStr"), Diff(INSERT,"Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5))¶Evluating: (LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluat"), Diff(EQUAL,"ing"), Diff(INSERT,":"), Diff(EQUAL," ("), Diff(DELETE,"List 2 3 (list 4 5)))"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15254" _type="PauseCommand" date="Mon Nov 29 21:07:55 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37544466">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1173]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15253" _type="ShellCommand" date="Mon Nov 29 21:07:55 EST 2021" starttimestamp="1638200531246" timestamp="37544466" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15256" _type="PauseCommand" date="Mon Nov 29 21:07:57 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37546355">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1889]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15255" _type="ShellCommand" date="Mon Nov 29 21:07:57 EST 2021" starttimestamp="1638200531246" timestamp="37546355" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15258" _type="PauseCommand" date="Mon Nov 29 21:07:58 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37547664">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1309]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15257" _type="ShellCommand" date="Mon Nov 29 21:07:58 EST 2021" starttimestamp="1638200531246" timestamp="37547664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15262" _type="PauseCommand" date="Mon Nov 29 21:08:51 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37600525">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1125]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="15261" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:08:51 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37600525" type="Run" />
  <Command __id="15264" _type="PauseCommand" date="Mon Nov 29 21:08:57 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37605777">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5252]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15263" _type="ConsoleInput" date="Mon Nov 29 21:08:57 EST 2021" starttimestamp="1638200531246" timestamp="37605777" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15265" _type="ConsoleOutput" date="Mon Nov 29 21:08:57 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37605883" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING"), Diff(INSERT,"ing: (+ A 13)¶42¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5"), Diff(INSERT,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(INSERT,"+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X"), Diff(EQUAL,") ("), Diff(DELETE,"T"), Diff(INSERT,"*"), Diff(EQUAL," ("), Diff(DELETE,"FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(INSERT,"+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLIST"), Diff(INSERT,"ing: (+ 1 1)¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (("), Diff(EQUAL,"LAMBDA (X"), Diff(INSERT," Y"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(INSERT,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"EQ"), Diff(INSERT,"+"), Diff(EQUAL," X "), Diff(DELETE,"NIL"), Diff(INSERT,"(+ Y 0)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X"), Diff(INSERT,"+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(EQUAL,")¶Evluating: (FUNCALL "), Diff(DELETE,"ISLISTHELPER (CDR X)"), Diff(INSERT,"TIMESGENERATOR 2"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"ISLISTHELPE"), Diff(INSERT,"TIMESGENERATO"), Diff(EQUAL,"R¶UnEvaluated Expression: "), Diff(DELETE,"ISLISTHELPE"), Diff(INSERT,"TIMESGENERATO"), Diff(EQUAL,"R¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"C"), Diff(INSERT,"FUNCTI"), Diff(EQUAL,"ON"), Diff(DELETE,"D"), Diff(EQUAL," ("), Diff(DELETE,"(ATOM X"), Diff(INSERT,"LAMBDA (Y"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)"), Diff(INSERT,"Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"COND ((ATOM X"), Diff(INSERT,"SETQ PRODUCT3 (LAMBDA (X Y Z"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(INSERT,"(* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLISTHELPER"), Diff(INSERT,"ing: (SETQ IDENTITY (CURRY PRODUCT2 1))"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (CURRY PRODUCT2 1)¶"), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"X"), Diff(INSERT,"Z"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((ATOM X"), Diff(INSERT,"FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) "), Diff(INSERT,"(* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ("), Diff(EQUAL,"(EQ X NIL)"), Diff(INSERT," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(DELETE,"(CDR "), Diff(EQUAL,"X"), Diff(INSERT,")"), Diff(EQUAL,"))))¶Evluating: ("), Diff(DELETE,"ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(INSERT,"LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15266" _type="ConsoleOutput" date="Mon Nov 29 21:08:58 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37606782" type="ConsoleOutput">
    <outputString><![CDATA[ (funcall toString (List 2 3 (list 4 5)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)"), Diff(INSERT," (funcall toString (List 2 3 (list 4 5"), Diff(EQUAL,")))¶")]]]></diff>
  </Command>
  <Command __id="15267" _type="PasteCommand" date="Mon Nov 29 21:08:58 EST 2021" starttimestamp="1638200531246" timestamp="37606784" />
  <Command __id="15268" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:08:58 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37606802" type="Run" />
  <Command __id="15269" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:08:58 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37606802" type="Run" />
  <Command __id="15270" _type="ConsoleOutput" date="Mon Nov 29 21:08:58 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37606844" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (LIST 2 3 (LIST 4 5))
Evluating: (LIST 4 5)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," (funcall toStr"), Diff(INSERT,"Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5))¶Evluating: (LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluat"), Diff(EQUAL,"ing"), Diff(INSERT,":"), Diff(EQUAL," ("), Diff(DELETE,"List 2 3 (list 4 5)))"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15272" _type="PauseCommand" date="Mon Nov 29 21:09:03 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37612263">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5419]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15271" _type="ShellCommand" date="Mon Nov 29 21:09:03 EST 2021" starttimestamp="1638200531246" timestamp="37612263" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15274" _type="PauseCommand" date="Mon Nov 29 21:09:43 EST 2021" range="30s-1m" starttimestamp="1638200531246" timestamp="37652136">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[39873]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15273" _type="ShellCommand" date="Mon Nov 29 21:09:43 EST 2021" starttimestamp="1638200531246" timestamp="37652136" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15276" _type="PauseCommand" date="Mon Nov 29 21:09:44 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37653298">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1162]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15275" _type="ShellCommand" date="Mon Nov 29 21:09:44 EST 2021" starttimestamp="1638200531246" timestamp="37653298" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15278" _type="PauseCommand" date="Mon Nov 29 21:10:06 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="37675077">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21779]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15277" _type="ShellCommand" date="Mon Nov 29 21:10:06 EST 2021" starttimestamp="1638200531246" timestamp="37675077" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15280" _type="PauseCommand" date="Mon Nov 29 21:10:08 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37677580">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2503]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="15281" _type="MoveCaretCommand" caretOffset="1451" date="Mon Nov 29 21:10:09 EST 2021" docOffset="1451" starttimestamp="1638200531246" timestamp="37678355" />
  <Command __id="15283" _type="PauseCommand" date="Mon Nov 29 21:10:16 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37684827">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6472]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15282" _type="ShellCommand" date="Mon Nov 29 21:10:16 EST 2021" starttimestamp="1638200531246" timestamp="37684827" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15285" _type="PauseCommand" date="Mon Nov 29 21:10:18 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37686957">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2130]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15284" _type="ShellCommand" date="Mon Nov 29 21:10:18 EST 2021" starttimestamp="1638200531246" timestamp="37686957" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15287" _type="PauseCommand" date="Mon Nov 29 21:10:19 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37688035">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1078]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15286" _type="ShellCommand" date="Mon Nov 29 21:10:19 EST 2021" starttimestamp="1638200531246" timestamp="37688035" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15289" _type="PauseCommand" date="Mon Nov 29 21:10:27 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37696111">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8076]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15288" _type="ShellCommand" date="Mon Nov 29 21:10:27 EST 2021" starttimestamp="1638200531246" timestamp="37696111" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15291" _type="PauseCommand" date="Mon Nov 29 21:10:30 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37699295">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3184]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15290" _type="ShellCommand" date="Mon Nov 29 21:10:30 EST 2021" starttimestamp="1638200531246" timestamp="37699295" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15293" _type="PauseCommand" date="Mon Nov 29 21:10:41 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37710502">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11207]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15292" _type="ShellCommand" date="Mon Nov 29 21:10:41 EST 2021" starttimestamp="1638200531246" timestamp="37710502" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15295" _type="PauseCommand" date="Mon Nov 29 21:10:44 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37712818">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2316]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15294" _type="ShellCommand" date="Mon Nov 29 21:10:44 EST 2021" starttimestamp="1638200531246" timestamp="37712818" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15299" _type="PauseCommand" date="Mon Nov 29 21:11:04 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37733564">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1233]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="15298" _type="ProgramExecutionEvent" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:11:04 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37733564" type="Run" />
  <Command __id="15300" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:11:04 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37733564" type="Run" />
  <Command __id="15302" _type="PauseCommand" date="Mon Nov 29 21:11:10 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37739058">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5494]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15301" _type="ConsoleInput" date="Mon Nov 29 21:11:10 EST 2021" starttimestamp="1638200531246" timestamp="37739058" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15303" _type="ConsoleOutput" date="Mon Nov 29 21:11:10 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37739159" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING"), Diff(INSERT,"ing: (+ A 13)¶42¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5"), Diff(INSERT,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(INSERT,"+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X"), Diff(EQUAL,") ("), Diff(DELETE,"T"), Diff(INSERT,"*"), Diff(EQUAL," ("), Diff(DELETE,"FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(INSERT,"+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLIST"), Diff(INSERT,"ing: (+ 1 1)¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (("), Diff(EQUAL,"LAMBDA (X"), Diff(INSERT," Y"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(INSERT,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"EQ"), Diff(INSERT,"+"), Diff(EQUAL," X "), Diff(DELETE,"NIL"), Diff(INSERT,"(+ Y 0)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X"), Diff(INSERT,"+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(EQUAL,")¶Evluating: (FUNCALL "), Diff(DELETE,"ISLISTHELPER (CDR X)"), Diff(INSERT,"TIMESGENERATOR 2"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"ISLISTHELPE"), Diff(INSERT,"TIMESGENERATO"), Diff(EQUAL,"R¶UnEvaluated Expression: "), Diff(DELETE,"ISLISTHELPE"), Diff(INSERT,"TIMESGENERATO"), Diff(EQUAL,"R¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"C"), Diff(INSERT,"FUNCTI"), Diff(EQUAL,"ON"), Diff(DELETE,"D"), Diff(EQUAL," ("), Diff(DELETE,"(ATOM X"), Diff(INSERT,"LAMBDA (Y"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)"), Diff(INSERT,"Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"COND ((ATOM X"), Diff(INSERT,"SETQ PRODUCT3 (LAMBDA (X Y Z"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(INSERT,"(* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLISTHELPER"), Diff(INSERT,"ing: (SETQ IDENTITY (CURRY PRODUCT2 1))"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (CURRY PRODUCT2 1)¶"), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"X"), Diff(INSERT,"Z"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((ATOM X"), Diff(INSERT,"FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z"), Diff(EQUAL,") ("), Diff(DELETE,"EQ"), Diff(INSERT,"*"), Diff(EQUAL," X "), Diff(DELETE,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) "), Diff(INSERT,"(* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ("), Diff(EQUAL,"(EQ X NIL)"), Diff(INSERT," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(DELETE,"(CDR "), Diff(EQUAL,"X"), Diff(INSERT,")"), Diff(EQUAL,"))))¶Evluating: ("), Diff(DELETE,"ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(INSERT,"LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15305" _type="PauseCommand" date="Mon Nov 29 21:11:11 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37740441">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1282]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="15304" _type="PasteCommand" date="Mon Nov 29 21:11:11 EST 2021" starttimestamp="1638200531246" timestamp="37740441" />
  <Command __id="15306" _type="ConsoleOutput" date="Mon Nov 29 21:11:11 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37740542" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (LIST 2 3 (LIST 4 5))
Evluating: (LIST 4 5)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(INSERT,"FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ A 13)¶42¶42"), Diff(INSERT,"ed Expression: TOSTRING"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X"), Diff(INSERT,"LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"T"), Diff(EQUAL," ("), Diff(DELETE,"+ 1 1)"), Diff(INSERT,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(EQUAL," X))"), Diff(INSERT,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"* (+ 1 1) X)¶"), Diff(INSERT,"FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ 1 1)¶42"), Diff(INSERT,"ed Expression: ISLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"+"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"(+ Y 0)"), Diff(INSERT,"NIL"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+ Y 0)¶42¶"), Diff(INSERT,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(INSERT,"ed Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X"), Diff(EQUAL,")¶Evluating: (FUNCALL "), Diff(DELETE,"TIMESGENERATOR 2"), Diff(INSERT,"ISLISTHELPER (CDR X)"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"TIMESGENERATO"), Diff(INSERT,"ISLISTHELPE"), Diff(EQUAL,"R¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATO"), Diff(INSERT,"ISLISTHELPE"), Diff(EQUAL,"R¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y"), Diff(INSERT,"(ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ PRODUCT3 (LAMBDA (X Y Z"), Diff(INSERT,"COND ((ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"(* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ IDENTITY (CURRY PRODUCT2 1))"), Diff(INSERT,"ed Expression: ISLISTHELPER"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (CURRY PRODUCT2 1)¶"), Diff(INSERT,"ed Expression: "), Diff(EQUAL,"LAMBDA ("), Diff(DELETE,"Z"), Diff(INSERT,"X"), Diff(EQUAL,") ("), Diff(DELETE,"FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z"), Diff(INSERT,"COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"SETQ ISLIST (LAMBDA (X) (COND ("), Diff(INSERT,"COND ((ATOM X) "), Diff(EQUAL,"(EQ X NIL)"), Diff(DELETE," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(INSERT,"(CDR "), Diff(EQUAL,"X"), Diff(DELETE,")"), Diff(EQUAL,"))))¶Evluating: ("), Diff(DELETE,"LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(INSERT,"ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15308" _type="PauseCommand" date="Mon Nov 29 21:11:14 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37743357">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2815]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15307" _type="ShellCommand" date="Mon Nov 29 21:11:14 EST 2021" starttimestamp="1638200531246" timestamp="37743357" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15310" _type="PauseCommand" date="Mon Nov 29 21:11:16 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37744890">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1533]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15309" _type="ShellCommand" date="Mon Nov 29 21:11:16 EST 2021" starttimestamp="1638200531246" timestamp="37744890" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15312" _type="PauseCommand" date="Mon Nov 29 21:11:18 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37747509">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2619]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="15313" _type="MoveCaretCommand" caretOffset="22" date="Mon Nov 29 21:11:19 EST 2021" docOffset="22" starttimestamp="1638200531246" timestamp="37748162" />
  <Command __id="15314" _type="RunCommand" className="/Assignment5/src/mainPackage/Grader.java" date="Mon Nov 29 21:11:19 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37748709" type="Run" />
  <Command __id="15315" _type="ShellCommand" date="Mon Nov 29 21:11:20 EST 2021" starttimestamp="1638200531246" timestamp="37749187" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15317" _type="PauseCommand" date="Mon Nov 29 21:11:29 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37757940">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8753]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15316" _type="ConsoleOutput" date="Mon Nov 29 21:11:29 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37757940" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):16
Test execution time (ms):10
Test execution time (ms):12
Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")
Number of traces > 600  turning tracing off
Evluating: (SETQ A 29)
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
Evluating: (SETQ X 5)
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
Evluating: (SETQ ISLISTHELPER (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X)))))
Evluating: (SETQ TOSTRINGASSEXPRESSION (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))))
Evluating: (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")"))))
Evluating: (SETQ TOSTRINGASLIST (LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")))
Evluating: (LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")"))
Evluating: (SETQ TOSTRINGASLISTHELPER (LAMBDA (X) (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X)))) (T (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X)) (FUNCALL TOSTRINGASLISTHELPER (CDR X)))))))
Evluating: (LAMBDA (X) (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X)))) (T (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X)) (FUNCALL TOSTRINGASLISTHELPER (CDR X))))))
Evluating: (SETQ TOSTRING (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: "), Diff(INSERT,"Test execution time (ms):16¶Test execution time (ms):10¶Test execution time (ms):12¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Number of traces > 600  turning tracing off¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶Evluating: (("), Diff(EQUAL,"LAMBDA (X"), Diff(INSERT," Y"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X"), Diff(INSERT,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30"), Diff(EQUAL,")))"), Diff(INSERT,"))"), Diff(EQUAL,"¶Evluating: (L"), Diff(DELETE,"IST 2 3 (LIST 4 5"), Diff(INSERT,"AMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"LIST 4"), Diff(INSERT,"SETQ X"), Diff(EQUAL," 5)¶Evluating: ("), Diff(DELETE,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)"), Diff(INSERT,"SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2"), Diff(EQUAL,"))¶Evluating: (FUNCALL "), Diff(DELETE,"ISLIST X"), Diff(INSERT,"TIMESGENERATOR 2"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"ISLIST"), Diff(INSERT,"TIMESGENERATOR"), Diff(EQUAL,"¶UnEvaluated Expression: "), Diff(DELETE,"ISLIST"), Diff(INSERT,"TIMESGENERATOR"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(INSERT,"FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLISTHELPER"), Diff(INSERT,"ing: (CURRY PRODUCT2 1)"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (SETQ ISLIST ("), Diff(EQUAL,"LAMBDA (X) (COND ("), Diff(DELETE,"(ATOM X) "), Diff(EQUAL,"(EQ X NIL)"), Diff(INSERT," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(DELETE,"(CDR "), Diff(EQUAL,"X"), Diff(INSERT,")"), Diff(EQUAL,"))))¶Evluating: ("), Diff(DELETE,"COND ((ATOM X) "), Diff(INSERT,"LAMBDA (X) (COND ("), Diff(EQUAL,"(EQ X NIL)"), Diff(INSERT," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(DELETE,"(CDR "), Diff(EQUAL,"X))))¶Evluating: ("), Diff(DELETE,"ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: "), Diff(INSERT,"SETQ ISLISTHELPER ("), Diff(EQUAL,"LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))"), Diff(INSERT,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"CDR X)¶Evluating:"), Diff(INSERT,"LAMBDA (X)"), Diff(EQUAL," (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))"), Diff(INSERT,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"ATOM X)¶Evluating: (FUNCALL ISLISTHELPER"), Diff(INSERT,"SETQ TOSTRINGASSEXPRESSION (LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING"), Diff(EQUAL," (C"), Diff(DELETE,"D"), Diff(INSERT,"A"), Diff(EQUAL,"R X))"), Diff(DELETE,"¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER"), Diff(INSERT," " . " (FUNCALL TOSTRING (CDR X)) ")")))))"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression"), Diff(INSERT,"ing"), Diff(EQUAL,": "), Diff(INSERT,"("), Diff(EQUAL,"LAMBDA (X) (COND ((ATOM X) ("), Diff(DELETE,"EQ X NIL)) (T (FUNCALL ISLISTHELPER"), Diff(INSERT,"WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING"), Diff(EQUAL," (C"), Diff(DELETE,"D"), Diff(INSERT,"A"), Diff(EQUAL,"R X))"), Diff(DELETE,"))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T"), Diff(INSERT," " . " (FUNCALL TOSTRING (CDR X)) ")"))))¶Evluating: (SETQ TOSTRINGASLIST (LAMBDA (X) (CONCATENATE (QUOTE STRING) "(""), Diff(EQUAL," (FUNCALL "), Diff(DELETE,"I"), Diff(INSERT,"TOSTRINGA"), Diff(EQUAL,"SLISTHELPER "), Diff(DELETE,"(CDR X)"), Diff(INSERT,"X) ")""), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(INSERT,"LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")"))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T"), Diff(INSERT,"ing: (SETQ TOSTRINGASLISTHELPER (LAMBDA (X) (COND ((ATOM (CDR X)) (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X)))) (T (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X))"), Diff(EQUAL," (FUNCALL "), Diff(DELETE,"I"), Diff(INSERT,"TOSTRINGA"), Diff(EQUAL,"SLISTHELPER (CDR X))))"), Diff(INSERT,")))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"CDR X)¶Evluating:"), Diff(INSERT,"LAMBDA (X)"), Diff(EQUAL," (COND ((ATOM "), Diff(INSERT,"(CDR "), Diff(EQUAL,"X)"), Diff(INSERT,")"), Diff(EQUAL," ("), Diff(DELETE,"EQ X NIL)) (T"), Diff(INSERT,"CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X)))) (T (CONCATENATE (QUOTE STRING) " " (FUNCALL TOSTRING (CAR X))"), Diff(EQUAL," (FUNCALL "), Diff(DELETE,"I"), Diff(INSERT,"TOSTRINGA"), Diff(EQUAL,"SLISTHELPER (CDR X))))"), Diff(INSERT,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"ATOM X)¶Evluating: (EQ X NIL)¶Evluating:"), Diff(INSERT,"SETQ TOSTRING (LAMBDA (X) (COND ((FUNCALL ISLIST X)"), Diff(EQUAL," (FUNCALL TOSTRINGASLIST X)"), Diff(DELETE,"¶F: "), Diff(INSERT,") (T ("), Diff(EQUAL,"FUNCALL"), Diff(DELETE,"¶E:"), Diff(EQUAL," TOSTRINGAS"), Diff(DELETE,"LIST"), Diff(INSERT,"SEXPRESSION X)))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15318" _type="ConsoleOutput" date="Mon Nov 29 21:11:29 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37758053" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (CONS 1 (CONS 3 6)))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (CONS 1 (CONS 3 6))
Evluating: (CONS 3 6)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)
F: FUNCALL
E: TOSTRINGASSEXPRESSION
UnEvaluated Expression: TOSTRINGASSEXPRESSION
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))
Evluating: (ATOM X)
Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")
Evluating: (QUOTE STRING)
Evluating: (FUNCALL TOSTRING (CAR X))
F: FUNCALL
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):16¶Test execution time (ms):10¶Test execution time (ms):12¶Evluating: (LOAD "/Users/milenpatel/Desktop/COMP524-Workspace/Assignment5/test.lisp")¶Number of traces > 600  turning tracing off¶Evluating: (SETQ A 29)¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶"), Diff(INSERT,"Evluating: (FUNCALL TOSTRING (CONS 1 (CONS 3 6)))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)"), Diff(INSERT,"ed Expression: TOSTRING"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating"), Diff(INSERT,"ed Expression"), Diff(EQUAL,": "), Diff(DELETE,"("), Diff(EQUAL,"LAMBDA (X) ("), Diff(DELETE,"* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(INSERT,"COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"+ X (+ Y 0"), Diff(INSERT,"CONS 1 (CONS 3 6"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ Y 0"), Diff(INSERT,"CONS 3 6"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= D"), Diff(INSERT,"COND ((FUNCALL ISL"), Diff(EQUAL,"IST "), Diff(DELETE,"13"), Diff(INSERT,"X"), Diff(EQUAL,") ("), Diff(DELETE,"<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶"), Diff(INSERT,"FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ X 5)"), Diff(INSERT,"ed Expression: ISLIST"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(INSERT,"ed Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL"), Diff(EQUAL,")¶Evluating: (FUNCALL "), Diff(DELETE,"TIMESGENERATOR 2"), Diff(INSERT,"ISLISTHELPER X"), Diff(EQUAL,")¶F: FUNCALL¶E: "), Diff(DELETE,"TIMESGENERATO"), Diff(INSERT,"ISLISTHELPE"), Diff(EQUAL,"R¶UnEvaluated Expression: "), Diff(DELETE,"TIMESGENERATO"), Diff(INSERT,"ISLISTHELPE"), Diff(EQUAL,"R¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y"), Diff(INSERT,"(ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X)"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"LAMBDA (Y"), Diff(INSERT,"COND ((ATOM X"), Diff(EQUAL,") ("), Diff(DELETE,"*"), Diff(INSERT,"EQ"), Diff(EQUAL," X "), Diff(DELETE,"Y))¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶"), Diff(INSERT,"NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (CURRY PRODUCT2 1)"), Diff(INSERT,"ed Expression: ISLISTHELPER"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ ISLIST ("), Diff(INSERT,"ed Expression: "), Diff(EQUAL,"LAMBDA (X) (COND ("), Diff(INSERT,"(ATOM X) "), Diff(EQUAL,"(EQ X NIL)"), Diff(DELETE," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(INSERT,"(CDR "), Diff(EQUAL,"X"), Diff(DELETE,")"), Diff(EQUAL,"))))¶Evluating: ("), Diff(DELETE,"LAMBDA (X) (COND ("), Diff(INSERT,"CDR X)¶Evluating: (COND ((ATOM X) "), Diff(EQUAL,"(EQ X NIL)"), Diff(DELETE," NIL"), Diff(EQUAL,") (T (FUNCALL ISLISTHELPER "), Diff(INSERT,"(CDR "), Diff(EQUAL,"X))))¶Evluating: ("), Diff(DELETE,"SETQ ISLISTHELPER ("), Diff(INSERT,"ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: "), Diff(EQUAL,"LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))"), Diff(DELETE,"))"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"LAMBDA (X)"), Diff(INSERT,"CDR X)¶Evluating:"), Diff(EQUAL," (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))"), Diff(DELETE,")¶Evluating: (SETQ TOSTRINGASSEXPRESSION (LAMBDA (X) (COND ((ATOM X) (WRITE-"), Diff(INSERT,"¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: "), Diff(EQUAL,"TO"), Diff(DELETE,"-"), Diff(EQUAL,"STRING"), Diff(DELETE," X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))))"), Diff(INSERT,"ASSEXPRESSION¶UnEvaluated Expression: TOSTRINGASSEXPRESSION"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing"), Diff(INSERT,"ed Expression"), Diff(EQUAL,": "), Diff(DELETE,"("), Diff(EQUAL,"LAMBDA (X) (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))"), Diff(DELETE,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ TOSTRINGASLIST (LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")")))¶Evluating: (LAMBDA (X) (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRINGASLISTHELPER X) ")"))¶Evluating: (SETQ "), Diff(INSERT,"COND ((ATOM X) (WRITE-"), Diff(EQUAL,"TO"), Diff(INSERT,"-"), Diff(EQUAL,"STRING"), Diff(DELETE,"ASLISTHELPER (LAMBDA (X) (COND ((ATOM (CDR"), Diff(EQUAL," X))"), Diff(INSERT," (T"), Diff(EQUAL," (CONCATENATE (QUOTE STRING) ""), Diff(DELETE," "), Diff(INSERT,"("), Diff(EQUAL,"" (FUNCALL TOSTRING (CAR X))"), Diff(DELETE,")) (T (CONCATENATE (QUOTE STRING)"), Diff(EQUAL," ""), Diff(INSERT," ."), Diff(EQUAL," " (FUNCALL TOSTRING (C"), Diff(DELETE,"A"), Diff(INSERT,"D"), Diff(EQUAL,"R X)) "), Diff(DELETE,"(FUNCALL TOSTRINGASLISTHELPER (CDR X)))))))¶Evluating: (LAMBDA (X) (COND ((ATOM (CDR X))"), Diff(INSERT,"")")))¶Evluating: (ATOM X)¶Evluating:"), Diff(EQUAL," (CONCATENATE (QUOTE STRING) ""), Diff(DELETE," "), Diff(INSERT,"("), Diff(EQUAL,"" (FUNCALL TOSTRING (CAR X))"), Diff(DELETE,")) (T (CONCATENATE (QUOTE STRING)"), Diff(EQUAL," ""), Diff(INSERT," ."), Diff(EQUAL," " (FUNCALL TOSTRING (C"), Diff(DELETE,"A"), Diff(INSERT,"D"), Diff(EQUAL,"R X)) "), Diff(DELETE,"(FUNCALL TOSTRINGASLISTHELPER (CDR X))))))¶Evluating: (SETQ TOSTRING (LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))))"), Diff(INSERT,"")")¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRING (CAR X))¶F: FUNCALL"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15320" _type="PauseCommand" date="Mon Nov 29 21:11:32 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37760774">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2721]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15319" _type="ShellCommand" date="Mon Nov 29 21:11:32 EST 2021" starttimestamp="1638200531246" timestamp="37760774" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15321" _type="ShellCommand" date="Mon Nov 29 21:11:32 EST 2021" starttimestamp="1638200531246" timestamp="37761720" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15323" _type="PauseCommand" date="Mon Nov 29 21:11:45 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37774368">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12648]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15322" _type="ShellCommand" date="Mon Nov 29 21:11:45 EST 2021" starttimestamp="1638200531246" timestamp="37774368" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15325" _type="PauseCommand" date="Mon Nov 29 21:11:59 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37788415">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14047]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="15326" _type="MoveCaretCommand" caretOffset="516" date="Mon Nov 29 21:11:59 EST 2021" docOffset="571" starttimestamp="1638200531246" timestamp="37788617" />
  <Command __id="15327" _type="RunCommand" className="/Assignment5/src/mainPackage/Runner.java" date="Mon Nov 29 21:12:00 EST 2021" kind="HitBreakPoint" projectName="Assignment5" starttimestamp="1638200531246" timestamp="37789264" type="Run" />
  <Command __id="15329" _type="PauseCommand" date="Mon Nov 29 21:12:07 EST 2021" range="5s-10s" starttimestamp="1638200531246" timestamp="37796426">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[7162]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="15328" _type="ConsoleInput" date="Mon Nov 29 21:12:07 EST 2021" starttimestamp="1638200531246" timestamp="37796426" type="Exception">
    <outputString><![CDATA[(load "test.lisp")
]]></outputString>
  </Command>
  <Command __id="15330" _type="ConsoleOutput" date="Mon Nov 29 21:12:07 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37796541" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (LOAD "test.lisp")
Evluating: (SETQ A 29)
29
Evluating: (SETQ B (+ A 13))
Evluating: (+ A 13)
42
42
Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))
Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))
Evluating: (+ 41 (+ 0 1))
Evluating: (+ 0 1)
42
Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)
Evluating: (LAMBDA (X) (* (+ 1 1) X))
Evluating: (* (+ 1 1) X)
Evluating: (+ 1 1)
42
Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)
Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))
Evluating: (+ X (+ Y 0))
Evluating: (+ Y 0)
42
Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))
Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))
LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (SETQ X 5)
5
Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))
Evluating: (FUNCALL TIMESGENERATOR 2)
F: FUNCALL
E: TIMESGENERATOR
UnEvaluated Expression: TIMESGENERATOR
Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))
Evluating: (LAMBDA (Y) (* X Y))
#<FUNCTION :LAMBDA (Y) (* X Y)>
Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))
Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))
LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))
Evluating: (CURRY PRODUCT3 1)
LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)
Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))
Evluating: (CURRY PRODUCT2 1)
LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)
Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))
Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL TOSTRING (CONS 1 (CONS 3 6)))¶F: FUNCALL¶E: TOSTRING¶Un"), Diff(INSERT,"LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: TOSTRING"), Diff(INSERT,"ing: (+ A 13)¶42¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X"), Diff(INSERT,"ing: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"CONS 1 (CONS 3 6"), Diff(INSERT,"+ 41 (+ 0 1"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"CONS 3 6)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)"), Diff(INSERT,"+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X"), Diff(EQUAL,") ("), Diff(DELETE,"T"), Diff(INSERT,"*"), Diff(EQUAL," ("), Diff(DELETE,"FUNCALL TOSTRINGASSEXPRESSION"), Diff(INSERT,"+ 1 1)"), Diff(EQUAL," X))"), Diff(DELETE,")"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶Un"), Diff(INSERT,"* (+ 1 1) X)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: ISLIST"), Diff(INSERT,"ing: (+ 1 1)¶42"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: "), Diff(INSERT,"ing: (("), Diff(EQUAL,"LAMBDA (X"), Diff(INSERT," Y"), Diff(EQUAL,") ("), Diff(DELETE,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X"), Diff(INSERT,"+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"EQ"), Diff(INSERT,"+"), Diff(EQUAL," X "), Diff(DELETE,"NIL"), Diff(INSERT,"(+ Y 0)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X"), Diff(INSERT,"+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)"), Diff(EQUAL,") ("), Diff(DELETE,"CO"), Diff(INSERT,"A"), Diff(EQUAL,"ND ("), Diff(DELETE,"(ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X"), Diff(INSERT,">= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)"), Diff(EQUAL,") ("), Diff(DELETE,"CO"), Diff(INSERT,"A"), Diff(EQUAL,"ND ("), Diff(DELETE,"(ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL"), Diff(INSERT,">= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2)"), Diff(EQUAL,")¶Evluating: (FUNCALL T"), Diff(DELETE,"OSTRINGASSEXPRESSION X)¶F: FUNCALL¶E: TOSTRINGASSEXPRESSION"), Diff(INSERT,"IMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR"), Diff(EQUAL,"¶UnEvaluated Expression: T"), Diff(DELETE,"OSTRINGASSEXPRESSION"), Diff(INSERT,"IMESGENERATOR"), Diff(EQUAL,"¶Evaluated Expression: LAMBDA (X) ("), Diff(DELETE,"C"), Diff(INSERT,"FUNCTI"), Diff(EQUAL,"ON"), Diff(DELETE,"D"), Diff(EQUAL," ("), Diff(DELETE,"(ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (COND ((ATOM X) (WRITE-TO-STRING X)) (T (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")))¶Evluating: (ATOM X)¶Evluating: (CONCATENATE (QUOTE STRING) "(" (FUNCALL TOSTRING (CAR X)) " . " (FUNCALL TOSTRING (CDR X)) ")")¶Evluating: (QUOTE STRING)¶Evluating: (FUNCALL TOSTRING (CAR X))¶F: FUNCALL"), Diff(INSERT,"LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X))))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15332" _type="PauseCommand" date="Mon Nov 29 21:12:10 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37799523">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2982]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15331" _type="ShellCommand" date="Mon Nov 29 21:12:10 EST 2021" starttimestamp="1638200531246" timestamp="37799523" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15334" _type="PauseCommand" date="Mon Nov 29 21:12:12 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37800869">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1346]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15333" _type="ShellCommand" date="Mon Nov 29 21:12:12 EST 2021" starttimestamp="1638200531246" timestamp="37800869" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15336" _type="PauseCommand" date="Mon Nov 29 21:12:13 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37802091">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1222]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15335" _type="ConsoleOutput" date="Mon Nov 29 21:12:13 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37802091" type="ConsoleOutput">
    <outputString><![CDATA[ (funcall toString (List 2 3 (list 4 5)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (LOAD "test.lisp")¶Evluating: (SETQ A 29)¶29¶Evluating: (SETQ B (+ A 13))¶Evluating: (+ A 13)¶42¶42¶Evluating: ((LAMBDA NIL (+ 41 (+ 0 1))))¶Evluating: (LAMBDA NIL (+ 41 (+ 0 1)))¶Evluating: (+ 41 (+ 0 1))¶Evluating: (+ 0 1)¶42¶Evluating: ((LAMBDA (X) (* (+ 1 1) X)) 21)¶Evluating: (LAMBDA (X) (* (+ 1 1) X))¶Evluating: (* (+ 1 1) X)¶Evluating: (+ 1 1)¶42¶Evluating: ((LAMBDA (X Y) (+ X (+ Y 0))) 40 2)¶Evluating: (LAMBDA (X Y) (+ X (+ Y 0)))¶Evluating: (+ X (+ Y 0))¶Evluating: (+ Y 0)¶42¶Evluating: (SETQ LISTDERIVEDSAFE (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))))¶Evluating: (LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30))))¶LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (SETQ X 5)¶5¶Evluating: (SETQ TIMESGENERATOR (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))))¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y))))¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (SETQ TWICE (FUNCALL TIMESGENERATOR 2))¶Evluating: (FUNCALL TIMESGENERATOR 2)¶F: FUNCALL¶E: TIMESGENERATOR¶UnEvaluated Expression: TIMESGENERATOR¶Evaluated Expression: LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (FUNCTION (LAMBDA (Y) (* X Y)))¶Evluating: (LAMBDA (Y) (* X Y))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶Evluating: (SETQ PRODUCT3 (LAMBDA (X Y Z) (* X (* Y Z))))¶Evluating: (LAMBDA (X Y Z) (* X (* Y Z)))¶LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (SETQ PRODUCT2 (CURRY PRODUCT3 1))¶Evluating: (CURRY PRODUCT3 1)¶LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)¶Evluating: (SETQ IDENTITY (CURRY PRODUCT2 1))¶Evluating: (CURRY PRODUCT2 1)¶LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 1) Y Z)) (QUOTE 1) Z)¶Evluating: (SETQ ISLIST (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))))¶Evluating: (LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)"), Diff(INSERT," (funcall toString (List 2 3 (list 4 5"), Diff(EQUAL,")))¶")]]]></diff>
  </Command>
  <Command __id="15337" _type="PasteCommand" date="Mon Nov 29 21:12:13 EST 2021" starttimestamp="1638200531246" timestamp="37802094" />
  <Command __id="15338" _type="ConsoleOutput" date="Mon Nov 29 21:12:13 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37802148" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))
F: FUNCALL
E: TOSTRING
UnEvaluated Expression: TOSTRING
Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (LIST 2 3 (LIST 4 5))
Evluating: (LIST 4 5)
Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))
Evluating: (FUNCALL ISLIST X)
F: FUNCALL
E: ISLIST
UnEvaluated Expression: ISLIST
Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))
Evluating: (EQ X NIL)
Evluating: (FUNCALL ISLISTHELPER X)
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (FUNCALL ISLISTHELPER (CDR X))
F: FUNCALL
E: ISLISTHELPER
UnEvaluated Expression: ISLISTHELPER
Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (CDR X)
Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))
Evluating: (ATOM X)
Evluating: (EQ X NIL)
Evluating: (FUNCALL TOSTRINGASLIST X)
F: FUNCALL
E: TOSTRINGASLIST
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," (funcall toStr"), Diff(INSERT,"Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5))¶Evluating: (LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluat"), Diff(EQUAL,"ing"), Diff(INSERT,":"), Diff(EQUAL," ("), Diff(DELETE,"List 2 3 (list 4 5)))"), Diff(INSERT,"COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15340" _type="PauseCommand" date="Mon Nov 29 21:12:29 EST 2021" range="10s-20s" starttimestamp="1638200531246" timestamp="37818389">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16241]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15339" _type="ShellCommand" date="Mon Nov 29 21:12:29 EST 2021" starttimestamp="1638200531246" timestamp="37818389" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="15342" _type="PauseCommand" date="Mon Nov 29 21:12:55 EST 2021" range="20s-30s" starttimestamp="1638200531246" timestamp="37844583">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26194]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15341" _type="ConsoleOutput" date="Mon Nov 29 21:12:55 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37844583" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):40
Evluating: (SETQ C 8)
Test execution time (ms):0
Evluating: (SETQ D (CONS C 3))
Evluating: (CONS C 3)
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL TOSTRING (LIST 2 3 (LIST 4 5)))¶F: FUNCALL¶E: TOSTRING¶UnEvaluated Expression: TOSTRING¶Evaluated Expression: LAMBDA (X) (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (LIST 2 3 (LIST 4 5))¶Evluating: (LIST 4 5)¶Evluating: (COND ((FUNCALL ISLIST X) (FUNCALL TOSTRINGASLIST X)) (T (FUNCALL TOSTRINGASSEXPRESSION X)))¶Evluating: (FUNCALL ISLIST X)¶F: FUNCALL¶E: ISLIST¶UnEvaluated Expression: ISLIST¶Evaluated Expression: LAMBDA (X) (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (COND ((EQ X NIL) NIL) (T (FUNCALL ISLISTHELPER X)))¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL ISLISTHELPER X)¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (FUNCALL ISLISTHELPER (CDR X))¶F: FUNCALL¶E: ISLISTHELPER¶UnEvaluated Expression: ISLISTHELPER¶Evaluated Expression: LAMBDA (X) (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (CDR X)¶Evluating: (COND ((ATOM X) (EQ X NIL)) (T (FUNCALL ISLISTHELPER (CDR X))))¶Evluating: (ATOM X)¶Evluating: (EQ X NIL)¶Evluating: (FUNCALL TOSTRINGASLIST X)¶F: FUNCALL¶E: TOSTRINGASLIST"), Diff(INSERT,"Test execution time (ms):40¶Evluating: (SETQ C 8)¶Test execution time (ms):0¶Evluating: (SETQ D (CONS C 3))¶Evluating: (CONS C 3)¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15343" _type="ConsoleOutput" date="Mon Nov 29 21:12:55 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37844748" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Building symbol table and running first pass checks:Mon Nov 29 21:12:55 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"4"), Diff(EQUAL,"0¶"), Diff(DELETE,"Evluating: (SETQ C 8)¶Test execution time (ms):0¶Evluating: (SETQ D (CONS C 3))¶Evluating: (CONS C 3)¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(INSERT,"Building symbol table and running first pass checks:Mon Nov 29 21:12:55 EST 2021"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15345" _type="PauseCommand" date="Mon Nov 29 21:12:58 EST 2021" range="2s-5s" starttimestamp="1638200531246" timestamp="37846915">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2167]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15344" _type="ConsoleOutput" date="Mon Nov 29 21:12:58 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37846915" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:47
Running second pass checks Mon Nov 29 21:12:58 EST 2021
Start O(n2) inter- and intra class method calls:Mon Nov 29 21:12:58 EST 2021
End O(n2) inter- and intra class method calls:Mon Nov 29 21:12:58 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):0¶Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:47¶Running second pass checks Mon Nov 29 21:12:58 EST 2021¶Start O(n2) inter- and intra class method calls:Mon Nov 29 21:12:58 EST 2021¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Mon Nov 29 21:12:5"), Diff(DELETE,"5"), Diff(INSERT,"8"), Diff(EQUAL," EST 2021¶")]]]></diff>
  </Command>
  <Command __id="15347" _type="PauseCommand" date="Mon Nov 29 21:12:59 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37848269">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1354]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15346" _type="ConsoleOutput" date="Mon Nov 29 21:12:59 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37848269" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Mon Nov 29 21:12:59 EST 2021
Generating checks:Mon Nov 29 21:12:59 EST 2021
Finished Generating checks:Mon Nov 29 21:12:59 EST 2021
Generating externals:Mon Nov 29 21:12:59 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:47¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Mon Nov 29 21:12:5"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EST 2021¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Mon Nov 29 21:12:59 EST 2021¶Finished Generating check"), Diff(EQUAL,"s:Mon Nov 29 21:12:5"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EST 2021¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Mon Nov 29 21:12:5"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EST 2021¶")]]]></diff>
  </Command>
  <Command __id="15348" _type="ConsoleOutput" date="Mon Nov 29 21:12:59 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37848375" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Mon Nov 29 21:12:59 EST 2021
Test execution time (ms):3755
Test execution time (ms):13
Evluating: ((LAMBDA (A B) (+ A B)) 1 2)
Evluating: (LAMBDA (A B) (+ A B))
Evluating: (+ A B)
Test execution time (ms):2
Evluating: ((LAMBDA (X) (EVAL X)) 1)
Evluating: (LAMBDA (X) (EVAL X))
Evluating: (EVAL X)
Test execution time (ms):1
Evluating: ((LAMBDA NIL (EVAL 25)))
Evluating: (LAMBDA NIL (EVAL 25))
Evluating: (EVAL 25)
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Mon Nov 29 21:12:59 EST 2021¶"), Diff(DELETE,"Generating checks:Mon Nov 29 21:12:59 EST 2021¶Finished Generating checks:Mon Nov 29 21:12:59 EST 2021¶Generating externals:Mon Nov 29 21:12:59 EST 2021"), Diff(INSERT,"Test execution time (ms):3755¶Test execution time (ms):13¶Evluating: ((LAMBDA (A B) (+ A B)) 1 2)¶Evluating: (LAMBDA (A B) (+ A B))¶Evluating: (+ A B)¶Test execution time (ms):2¶Evluating: ((LAMBDA (X) (EVAL X)) 1)¶Evluating: (LAMBDA (X) (EVAL X))¶Evluating: (EVAL X)¶Test execution time (ms):1¶Evluating: ((LAMBDA NIL (EVAL 25)))¶Evluating: (LAMBDA NIL (EVAL 25))¶Evluating: (EVAL 25)¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15349" _type="ConsoleOutput" date="Mon Nov 29 21:12:59 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37848479" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):18
Test execution time (ms):13
Test execution time (ms):9
Test execution time (ms):12
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Mon Nov 29 21:12:59 EST 2021¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"3755"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"3¶Evluating: ((LAMBDA (A B) (+ A B)) 1 2)¶Evluating: (LAMBDA (A B) (+ A B))¶Evluating: (+ A B)¶Test execution time (ms):2¶Evluating: ((LAMBDA (X) (EVAL X)) 1)¶Evluating: (LAMBDA (X) (EVAL X))¶Evluating: (EVAL X)¶Test execution time (ms):1¶Evluating: ((LAMBDA NIL (EVAL 25)))¶Evluating: (LAMBDA NIL (EVAL 25))¶Evluating: (EVAL 25)¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(INSERT,"8¶Test execution time (ms):13¶Test execution time (ms):9¶Test execution time (ms):12"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15351" _type="PauseCommand" date="Mon Nov 29 21:13:00 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37849712">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1233]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15350" _type="ConsoleOutput" date="Mon Nov 29 21:13:00 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37849712" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL TWICE 4)
F: FUNCALL
E: TWICE
Evluating: (* X Y)
Test execution time (ms):1
Evluating: (FUNCALL ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2) 3)
F: FUNCALL
E: ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2)
Evluating: ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2)
Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y))))
Evluating: (FUNCTION (LAMBDA (Y) (+ X Y)))
Evluating: (LAMBDA (Y) (+ X Y))
Evluating: (+ X Y)
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):0"), Diff(INSERT,"Evluating: (FUNCALL TWICE 4)¶F: FUNCALL¶E: TWICE¶Evluating: (* X Y)"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"8"), Diff(EQUAL,"¶"), Diff(DELETE,"Test execution time (ms):13¶Test execution time (ms):9"), Diff(INSERT,"Evluating: (FUNCALL ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2) 3)¶F: FUNCALL¶E: ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2)¶Evluating: ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2)¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y))))¶Evluating: (FUNCTION (LAMBDA (Y) (+ X Y)))¶Evluating: (LAMBDA (Y) (+ X Y))¶Evluating: (+ X Y)"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15352" _type="ConsoleOutput" date="Mon Nov 29 21:13:01 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37850581" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (COND (T (+ 2 1)) (T (+1)) (T (= 1 +)))
Evluating: (+ 2 1)
Test execution time (ms):1
Evluating: (COND)
Evluating: (COND (T NIL))
Evluating: (COND (T))
Evluating: (COND (NIL) ((+ 11 12)))
Evluating: (+ 11 12)
Evluating: (COND (NIL))
Test execution time (ms):0
Evluating: (QUOTE (QUOTE (+ 3 4)))
Test execution time (ms):0
Evluating: (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))
Evluating: (EVAL (QUOTE (QUOTE (+ 3 4))))
Evluating: (QUOTE (QUOTE (+ 3 4)))
Evluating: (QUOTE (+ 3 4))
Evluating: (+ 3 4)
Test execution time (ms):1
Evluating: (LIST (+ 2 3) 3 (- 2 1))
Evluating: (+ 2 3)
Evluating: (- 2 1)
Test execution time (ms):1
Evluating: (LIST (+ 3 3) (LIST (+ 1 2) (CONS 4 3)) (- 2 1))
Evluating: (+ 3 3)
Evluating: (LIST (+ 1 2) (CONS 4 3))
Evluating: (+ 1 2)
Evluating: (CONS 4 3)
Evluating: (- 2 1)
Test execution time (ms):1
Evluating: (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))
Evluating: (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2))))))
Evluating: (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))
Evluating: (QUOTE COND)
Evluating: (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2))
Evluating: (QUOTE (OR (/= 1 1) (AND NIL 3)))
Evluating: (CONS 1 2)
Evluating: (LIST (QUOTE (< 3 2)) 3)
Evluating: (QUOTE (< 3 2))
Evluating: (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2))))
Evluating: (QUOTE (AND 2 T))
Evluating: (QUOTE (QUOTE (+ 2 2)))
Evluating: (COND ((OR (/= 1 1) (AND NIL 3)) (1 . 2)) ((< 3 2) 3) ((AND 2 T) (QUOTE (+ 2 2))))
Evluating: (OR (/= 1 1) (AND NIL 3))
Evluating: (/= 1 1)
Evluating: (AND NIL 3)
Evluating: (< 3 2)
Evluating: (AND 2 T)
Evluating: (QUOTE (+ 2 2))
Evluating: (+ 2 2)
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL TWICE 4)¶F: FUNCALL¶E: TWICE¶Evluating: (* X Y"), Diff(INSERT,"COND (T (+ 2 1)) (T (+1)) (T (= 1 +)))¶Evluating: (+ 2 1)¶Test execution time (ms):1¶Evluating: (COND)¶Evluating: (COND (T NIL))¶Evluating: (COND (T))¶Evluating: (COND (NIL) ((+ 11 12)))¶Evluating: (+ 11 12)¶Evluating: (COND (NIL))¶Test execution time (ms):0¶Evluating: (QUOTE (QUOTE (+ 3 4))"), Diff(EQUAL,")¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"FUNCALL ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2) 3)¶F: FUNCALL¶E: ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2)¶Evluating: ((LAMBDA (X) (FUNCTION (LAMBDA (Y) (+ X Y)))) 2)¶Evluating: (LAMBDA (X) (FUNCTION (LAMBDA (Y)"), Diff(INSERT,"EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))¶Evluating: (EVAL (QUOTE (QUOTE (+ 3 4))))¶Evluating: (QUOTE (QUOTE (+ 3 4)))¶Evluating: (QUOTE (+ 3 4))¶Evluating: (+ 3 4)¶Test execution time (ms):1¶Evluating: (LIST (+ 2 3) 3 (- 2 1))¶Evluating: (+ 2 3)¶Evluating: (- 2 1)¶Test execution time (ms):1¶Evluating: (LIST (+ 3 3) (LIST (+ 1 2) (CONS 4 3)) (- 2 1))¶Evluating: (+ 3 3)¶Evluating: (LIST (+ 1 2) (CONS 4 3))¶Evluating: (+ 1 2)¶Evluating: (CONS 4 3)¶Evluating: (- 2 1)¶Test execution time (ms):1¶Evluating: (EVAL (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))¶Evluating: (EVAL (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2))))))¶Evluating: (LIST (QUOTE COND) (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))¶Evluating: (QUOTE COND)¶Evluating: (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2))¶Evluating: (QUOTE (OR (/= 1 1) (AND NIL 3)))¶Evluating: (CONS 1 2)¶Evluating: (LIST (QUOTE (< 3 2)) 3)¶Evluating: (QUOTE (< 3 2))¶Evluating: (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE"), Diff(EQUAL," (+ "), Diff(DELETE,"X Y"), Diff(INSERT,"2 2"), Diff(EQUAL,"))))¶Evluating: ("), Diff(DELETE,"FUNCTI"), Diff(INSERT,"QUOTE (AND 2 T))¶Evluating: (QUOTE (QUOTE (+ 2 2)))¶Evluating: (C"), Diff(EQUAL,"ON"), Diff(INSERT,"D"), Diff(EQUAL," ("), Diff(DELETE,"LAMBDA (Y) (+ X Y)))¶Evluating: (LAMBDA (Y)"), Diff(INSERT,"(OR (/= 1 1) (AND NIL 3)) (1 . 2)) ((< 3 2) 3) ((AND 2 T) (QUOTE (+ 2 2))))¶Evluating: (OR (/= 1 1) (AND NIL 3))¶Evluating: (/= 1 1)¶Evluating: (AND NIL 3)¶Evluating: (< 3 2)¶Evluating: (AND 2 T)¶Evluating: (QUOTE"), Diff(EQUAL," (+ "), Diff(DELETE,"X Y"), Diff(INSERT,"2 2"), Diff(EQUAL,"))¶Evluating: (+ "), Diff(DELETE,"X Y"), Diff(INSERT,"2 2"), Diff(EQUAL,")¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="15354" _type="PauseCommand" date="Mon Nov 29 21:13:02 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37851746">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1165]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15353" _type="ConsoleOutput" date="Mon Nov 29 21:13:02 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37851746" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL LISTDERIVEDSAFE 13 30 30)
F: FUNCALL
E: LISTDERIVEDSAFE
UnEvaluated Expression: LISTDERIVEDSAFE
Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))
Evluating: (>= DIST 13)
Evluating: (<= DUR 30)
Evluating: (<= EXH 30)
Evluating: (FUNCALL LISTDERIVEDSAFE 6 30 10)
F: FUNCALL
E: LISTDERIVEDSAFE
UnEvaluated Expression: LISTDERIVEDSAFE
Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))
Evluating: (>= DIST 13)
Evluating: (AND (>= DIST 6) (<= DUR 30) (<= EXH 10))
Evluating: (>= DIST 6)
Evluating: (<= DUR 30)
Evluating: (<= EXH 10)
Evluating: (FUNCALL LISTDERIVEDSAFE 27 30 50)
F: FUNCALL
E: LISTDERIVEDSAFE
UnEvaluated Expression: LISTDERIVEDSAFE
Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))
Evluating: (>= DIST 13)
Evluating: (<= DUR 30)
Evluating: (<= EXH 30)
Evluating: (AND (>= DIST 6) (<= DUR 30) (<= EXH 10))
Evluating: (>= DIST 6)
Evluating: (<= DUR 30)
Evluating: (<= EXH 10)
Evluating: (AND (>= DIST 27) (<= DUR 30) (<= EXH 50))
Evluating: (>= DIST 27)
Evluating: (<= DUR 30)
Evluating: (<= EXH 50)
Evluating: (FUNCALL LISTDERIVEDSAFE 13 15 50)
F: FUNCALL
E: LISTDERIVEDSAFE
UnEvaluated Expression: LISTDERIVEDSAFE
Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))
Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))
Evluating: (>= DIST 13)
Evluating: (<= DUR 30)
Evluating: (<= EXH 30)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"COND (T (+ 2 1)) (T (+1)) (T (= 1 +)))¶Evluating: (+ 2 1)¶Test execution time (ms):1¶Evluating: (COND)¶Evluating: (COND (T NIL))¶Evluating: (COND (T"), Diff(INSERT,"FUNCALL LISTDERIVEDSAFE 13 30 30)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression: LISTDERIVEDSAFE¶Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"CO"), Diff(INSERT,"A"), Diff(EQUAL,"ND ("), Diff(DELETE,"NIL) ((+ 11 12)"), Diff(INSERT,">= DIST 13) (<= DUR 30) (<= EXH 30"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 11"), Diff(INSERT,">= DIST"), Diff(EQUAL," 1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"COND (NIL))¶Test execution time (ms):0¶Evluating: (QUOTE (QUOTE (+ 3 4)))¶Test execution time (ms):0"), Diff(INSERT,"<= DUR 30)¶Evluating: (<= EXH 30)¶Evluating: (FUNCALL LISTDERIVEDSAFE 6 30 10)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression: LISTDERIVEDSAFE"), Diff(EQUAL,"¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (EVAL (EVAL (QUOTE (QUOTE (+ 3 4)))))¶Evluating: (EVAL (QUOTE (QUOTE (+ 3 4))))¶Evluating: (QUOTE (QUOTE (+ 3 4)))¶Evluating: (QUOTE (+ 3 4))¶Evluating: (+ 3 4)¶Test execution time (ms):1¶Evluating: (LIST (+ 2 3) 3 (- 2 1))¶Evluating: (+ 2 3)¶Evluating: (- 2 1)¶Test execution time (ms):1¶Evluating: (LIST (+ 3 3) (LIST (+ 1 2) (CONS 4"), Diff(INSERT,"ed Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR"), Diff(EQUAL," 3"), Diff(DELETE,")"), Diff(INSERT,"0"), Diff(EQUAL,") ("), Diff(DELETE,"- 2 1"), Diff(INSERT,"<= EXH 30"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 3 "), Diff(INSERT,">= DIST 1"), Diff(EQUAL,"3)¶Evluating: ("), Diff(DELETE,"LIST (+ 1 2) (CONS 4 3"), Diff(INSERT,"AND (>= DIST 6) (<= DUR 30) (<= EXH 10"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+ 1 2"), Diff(INSERT,">= DIST 6"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"CONS 4"), Diff(INSERT,"<= DUR"), Diff(EQUAL," 3"), Diff(INSERT,"0"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"- 2"), Diff(INSERT,"<= EXH"), Diff(EQUAL," 1"), Diff(INSERT,"0"), Diff(EQUAL,")¶"), Diff(DELETE,"Test execution time (ms):1¶Evluating: (EVAL (EVAL"), Diff(INSERT,"Evluating: (FUNCALL LISTDERIVEDSAFE 27 30 50)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression: LISTDERIVEDSAFE¶Evaluated Expression: LAMBDA"), Diff(EQUAL," ("), Diff(DELETE,"L"), Diff(INSERT,"D"), Diff(EQUAL,"IST "), Diff(DELETE,"(QUOTE CO"), Diff(INSERT,"DUR EXH) (OR (A"), Diff(EQUAL,"ND"), Diff(DELETE,")"), Diff(EQUAL," ("), Diff(DELETE,"LIST (QUOTE (OR"), Diff(INSERT,">= DIST 13)"), Diff(EQUAL," ("), Diff(DELETE,"/"), Diff(INSERT,"<"), Diff(EQUAL,"= "), Diff(DELETE,"1 1) (AND NIL"), Diff(INSERT,"DUR 30) (<= EXH"), Diff(EQUAL," 3"), Diff(DELETE,")"), Diff(INSERT,"0"), Diff(EQUAL,")) ("), Diff(DELETE,"CONS 1 2)) (LIST (QUOTE (< 3 2))"), Diff(INSERT,"AND (>= DIST 6) (<= DUR"), Diff(EQUAL," 3"), Diff(INSERT,"0"), Diff(EQUAL,") ("), Diff(DELETE,"LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))))¶Evluating: (EVAL (LIST (QUOTE CO"), Diff(INSERT,"<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (A"), Diff(EQUAL,"ND"), Diff(DELETE,")"), Diff(EQUAL," ("), Diff(DELETE,"LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2))))))¶Evluating: (LIST (QUOTE CO"), Diff(INSERT,">= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (A"), Diff(EQUAL,"ND"), Diff(DELETE,")"), Diff(EQUAL," ("), Diff(DELETE,"LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2)) (LIST (QUOTE (< 3 2)) 3) (LIST (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2)))))¶Evluating: (QUOTE COND)¶Evluating: (LIST (QUOTE (OR (/= 1 1) (AND NIL 3))) (CONS 1 2))¶Evluating: (QUOTE (OR (/= 1 1) (AND NIL 3)"), Diff(INSERT,">= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))¶Evluating: (>= DIST 13)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 30)¶Evluating: (AND (>= DIST 6) (<= DUR 30) (<= EXH 10))¶Evluating: (>= DIST 6)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 10)¶Evluating: (AND (>= DIST 27) (<= DUR 30) (<= EXH 50"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"CONS 1"), Diff(INSERT,">= DIST"), Diff(EQUAL," 2"), Diff(INSERT,"7"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"LIST (QUOTE (< 3 2)) 3)¶Evluating: (QUOTE (< 3 2))¶Evluating"), Diff(INSERT,"<= DUR 30)¶Evluating: (<= EXH 50)¶Evluating: (FUNCALL LISTDERIVEDSAFE 13 15 50)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression"), Diff(EQUAL,": "), Diff(DELETE,"("), Diff(EQUAL,"LIST"), Diff(DELETE," (QUOTE (AND 2 T)) (QUOTE (QUOTE (+ 2 2))))¶Evluating: (QUOTE (AND 2 T))¶Evluating: (QUOTE (QUOTE (+ 2 2)))¶Evluating: (COND ((OR"), Diff(INSERT,"DERIVEDSAFE¶Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30)"), Diff(EQUAL," ("), Diff(DELETE,"/"), Diff(INSERT,"<"), Diff(EQUAL,"= "), Diff(DELETE,"1 1) (AND NIL"), Diff(INSERT,"EXH 30)) (AND (>= DIST 6) (<= DUR"), Diff(EQUAL," 3"), Diff(DELETE,")"), Diff(INSERT,"0"), Diff(EQUAL,") ("), Diff(DELETE,"1 . 2)) ((< 3"), Diff(INSERT,"<= EXH 10)) (AND (>= DIST"), Diff(EQUAL," 2"), Diff(INSERT,"7"), Diff(EQUAL,") "), Diff(DELETE,"3) ((AND 2 T) (QUOTE (+ 2 2))))¶Evluating: (OR"), Diff(INSERT,"(<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND"), Diff(EQUAL," ("), Diff(DELETE,"/"), Diff(INSERT,">"), Diff(EQUAL,"= "), Diff(DELETE,"1 1) (AND NIL"), Diff(INSERT,"DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH"), Diff(EQUAL," 3"), Diff(INSERT,"0"), Diff(EQUAL,"))"), Diff(DELETE,"¶Evluating:"), Diff(INSERT," (AND (>= DIST 6)"), Diff(EQUAL," ("), Diff(DELETE,"/"), Diff(INSERT,"<"), Diff(EQUAL,"= "), Diff(DELETE,"1 1)¶Evluating: (AND NIL 3)¶Evluating: (< 3 2"), Diff(INSERT,"DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"AND 2 T"), Diff(INSERT,">= DIST 13"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"QUOTE (+ 2 2)"), Diff(INSERT,"<= DUR 30"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+ 2 2)¶Test execution time (ms):1"), Diff(INSERT,"<= EXH 30)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15355" _type="ConsoleOutput" date="Mon Nov 29 21:13:03 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37852545" type="ConsoleOutput">
    <outputString><![CDATA[Number of traces > 600  turning tracing off
Evluating: (SETQ LETTESTVAR1 10)
Evluating: (SETQ LETTESTVAR2 42)
Evluating: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) ((LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))
Evluating: ((LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))
Evluating: (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))
Evluating: (+ LETTESTVAR1 LETTESTVAR2)
Evluating: (FUNCALL (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))))
F: FUNCALL
E: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))
Evluating: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))
Evluating: (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))
Evluating: (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))
Evluating: (+ LETTESTVAR1 LETTESTVAR2)
Test execution time (ms):2
Evluating: (SETQ LETTESTVAR1 10)
Evluating: (LET ((LETTESTVAR1 42)) LETTESTVAR1)
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (FUNCALL LISTDERIVEDSAFE 13 30 30)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶Un"), Diff(INSERT,"Number of traces > 600  turning tracing off¶Evluating: (SETQ LETTESTVAR1 10)¶"), Diff(EQUAL,"Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LISTDERIVEDSAFE"), Diff(INSERT,"ing: (SETQ LETTESTVAR2 42)"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))¶Evluating: (>= DIST 13)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 30)¶Evluating: (FUNCALL LISTDERIVEDSAFE 6 30 10)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression: LISTDERIVEDSAFE"), Diff(INSERT,"ing: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) ((LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))¶Evluating: ((LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))¶Evluating: (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))¶Evluating: (+ LETTESTVAR1 LETTESTVAR2)"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH"), Diff(INSERT,"ing: (FUNCALL (LET ((LETTESTVAR1 5) (LETTESTVAR2"), Diff(EQUAL," 3"), Diff(DELETE,"0"), Diff(EQUAL,")) ("), Diff(DELETE,"AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))¶Evluating: (>= DIST 13)¶Evluating: (AND (>= DIST 6) (<= DUR 30) (<= EXH 10))¶Evluating: (>= DIST 6)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 10)¶Evluating: (FUNCALL LISTDERIVEDSAFE 27 30 50)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression: LISTDERIVEDSAFE¶Evaluated Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))¶Evluating: (>= DIST 13)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 30)¶Evluating: (AND (>= DIST 6) (<= DUR 30) (<= EXH 10))¶Evluating: (>= DIST 6)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 10)¶Evluating: (AND (>= DIST 27) (<= DUR 30) (<= EXH 50))¶Evluating: (>= DIST 27)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 50)¶Evluating: (FUNCALL LISTDERIVEDSAFE 13 15 50)¶F: FUNCALL¶E: LISTDERIVEDSAFE¶UnEvaluated Expression: LISTDERIVEDSAFE"), Diff(INSERT,"FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))))¶F: FUNCALL¶E: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))¶Evluating: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))¶Evluating: (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))¶Evluating: (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))¶Evluating: (+ LETTESTVAR1 LETTESTVAR2)¶Test execution time (ms):2"), Diff(EQUAL,"¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (DIST DUR EXH) (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (OR (AND (>= DIST 13) (<= DUR 30) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 30) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 30) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 15) (<= EXH 50)) (AND (>= DIST 13) (<= DUR 120) (<= EXH 10)) (AND (>= DIST 27) (<= DUR 120) (<= EXH 30)) (AND (>= DIST 6) (<= DUR 15) (<= EXH 30)))¶Evluating: (AND (>= DIST 13) (<= DUR 30) (<= EXH 30))¶Evluating: (>= DIST 13)¶Evluating: (<= DUR 30)¶Evluating: (<= EXH 30)"), Diff(INSERT,"ing: (SETQ LETTESTVAR1 10)¶Evluating: (LET ((LETTESTVAR1 42)) LETTESTVAR1)¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15357" _type="PauseCommand" date="Mon Nov 29 21:13:05 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37854509">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1964]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15356" _type="ConsoleOutput" date="Mon Nov 29 21:13:05 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37854509" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (FUNCALL (CURRY PRODUCT3 2) 3 4)
F: FUNCALL
E: (CURRY PRODUCT3 2)
Evluating: (CURRY PRODUCT3 2)
UnEvaluated Expression: (CURRY PRODUCT3 2)
Evaluated Expression: LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)
Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)
F: FUNCALL
E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
UnEvaluated Expression: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
Evaluated Expression: LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (QUOTE 2)
Evluating: (* X (* Y Z))
Evluating: (* Y Z)
Test execution time (ms):0
Evluating: (FUNCALL (CURRY (CURRY PRODUCT3 2) 3) 4)
F: FUNCALL
E: (CURRY (CURRY PRODUCT3 2) 3)
Evluating: (CURRY (CURRY PRODUCT3 2) 3)
Evluating: (CURRY PRODUCT3 2)
UnEvaluated Expression: (CURRY (CURRY PRODUCT3 2) 3)
Evaluated Expression: LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)) (QUOTE 3) Z)
Evluating: (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)) (QUOTE 3) Z)
F: FUNCALL
E: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))
Evluating: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))
UnEvaluated Expression: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))
Evaluated Expression: LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)
Evluating: (QUOTE 3)
Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)
F: FUNCALL
E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
UnEvaluated Expression: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
Evaluated Expression: LAMBDA (X Y Z) (* X (* Y Z))
Evluating: (QUOTE 2)
Evluating: (* X (* Y Z))
Evluating: (* Y Z)
Test execution time (ms):1
Evluating: (FUNCALL (CURRY PRODUCT3 2 3) 4)
F: FUNCALL
E: (CURRY PRODUCT3 2 3)
Evluating: (CURRY PRODUCT3 2 3)
UnEvaluated Expression: (CURRY PRODUCT3 2 3)
Evaluated Expression: LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) (QUOTE 3) Z)
Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) (QUOTE 3) Z)
F: FUNCALL
E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Number of traces > 600  turning tracing off¶Evluating: (SETQ LETTESTVAR1 10"), Diff(INSERT,"Evluating: (FUNCALL (CURRY PRODUCT3 2) 3 4)¶F: FUNCALL¶E: (CURRY PRODUCT3 2)¶Evluating: (CURRY PRODUCT3 2"), Diff(EQUAL,")¶"), Diff(INSERT,"Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (SETQ LETTESTVAR2 4"), Diff(INSERT,"ed Expression: (CURRY PRODUCT3 "), Diff(EQUAL,"2)¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) ((LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)"), Diff(INSERT,"ed Expression: LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z"), Diff(EQUAL,")))¶Evluating: ("), Diff(DELETE,"("), Diff(INSERT,"QUOTE "), Diff(EQUAL,"LAMBDA "), Diff(DELETE,"NIL (+ LETTESTVAR1 LETTESTVAR2"), Diff(INSERT,"(X Y Z) (* X (* Y Z)))¶UnEvaluated Expression: (QUOTE LAMBDA (X Y Z) (* X (* Y Z"), Diff(EQUAL,")))¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing"), Diff(INSERT,"ed Expression"), Diff(EQUAL,": "), Diff(DELETE,"("), Diff(EQUAL,"LAMBDA "), Diff(DELETE,"NIL (+ LETTESTVAR1 LETTESTVAR2))¶Evluating: (+ LETTESTVAR1 LETTESTVAR2"), Diff(INSERT,"(X Y Z) (* X (* Y Z))¶Evluating: (QUOTE 2)¶Evluating: (* X (* Y Z))¶Evluating: (* Y Z)¶Test execution time (ms):0¶Evluating: (FUNCALL (CURRY (CURRY PRODUCT3 2) 3) 4)¶F: FUNCALL¶E: (CURRY (CURRY PRODUCT3 2) 3)¶Evluating: (CURRY (CURRY PRODUCT3 2) 3)¶Evluating: (CURRY PRODUCT3 2)¶UnEvaluated Expression: (CURRY (CURRY PRODUCT3 2) 3"), Diff(EQUAL,")¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (FUNCALL (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2)))))¶F: FUNCALL¶E: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))"), Diff(INSERT,"ed Expression: LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)) (QUOTE 3) Z)¶Evluating: (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)) (QUOTE 3) Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))¶Evluating: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z"), Diff(EQUAL,"))¶"), Diff(INSERT,"Un"), Diff(EQUAL,"Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (LET ((LETTESTVAR1 5) (LETTESTVAR2 3)) (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2))))¶Evluating: (FUNCTION (LAMBDA NIL (+ LETTESTVAR1 LETTESTVAR2"), Diff(INSERT,"ed Expression: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))¶Evaluated Expression: LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶Evluating: (QUOTE 3)¶Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z"), Diff(EQUAL,")))¶Evluating: ("), Diff(INSERT,"QUOTE "), Diff(EQUAL,"LAMBDA "), Diff(DELETE,"NIL (+ LETTESTVAR1 LETTESTVAR2))¶Evluating: (+ LETTESTVAR1 LETTESTVAR2"), Diff(INSERT,"(X Y Z) (* X (* Y Z)))¶UnEvaluated Expression: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evaluated Expression: LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (QUOTE 2)¶Evluating: (* X (* Y Z))¶Evluating: (* Y Z"), Diff(EQUAL,")¶Test execution time (ms):"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"SETQ LETTESTVAR1 10"), Diff(INSERT,"FUNCALL (CURRY PRODUCT3 2 3) 4)¶F: FUNCALL¶E: (CURRY PRODUCT3 2 3)¶Evluating: (CURRY PRODUCT3 2 3)¶UnEvaluated Expression: (CURRY PRODUCT3 2 3"), Diff(EQUAL,")¶Ev"), Diff(INSERT,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ing: (LET ((LETTESTVAR1 42)) LETTESTVAR1)¶Test execution time (ms):1"), Diff(INSERT,"ed Expression: LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) (QUOTE 3) Z)¶Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) (QUOTE 3) Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15358" _type="ConsoleOutput" date="Mon Nov 29 21:13:06 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37855388" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (> (+ 1 1) (- 2 1))
Evluating: (+ 1 1)
Evluating: (- 2 1)
Test execution time (ms):1
Evluating: (>= 1 (+ 1 1))
Evluating: (+ 1 1)
Test execution time (ms):0
Evluating: (< (+ 3 2) 3)
Evluating: (+ 3 2)
Test execution time (ms):0
Evluating: (<= (+ 1 2) (EVAL 5))
Evluating: (+ 1 2)
Evluating: (EVAL 5)
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"FUNCALL (CURRY PRODUCT3 2) 3 4)¶F: FUNCALL¶E: (CURRY PRODUCT3 2)¶Evluating: (CURRY PRODUCT3 2)¶UnEvaluated Expression: (CURRY PRODUCT3 2"), Diff(INSERT,"> (+ 1 1) (- 2 1)"), Diff(EQUAL,")¶Ev"), Diff(DELETE,"a"), Diff(EQUAL,"luat"), Diff(DELETE,"ed Expression: LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶UnEvaluated Expression: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evaluated Expression: LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (QUOTE 2)"), Diff(INSERT,"ing: (+ 1 1)¶Evluating: (- 2 1)¶Test execution time (ms):1"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"* X (* Y Z"), Diff(INSERT,">= 1 (+ 1 1"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"* Y Z"), Diff(INSERT,"+ 1 1"), Diff(EQUAL,")¶Test execution time (ms):0¶Evluating: ("), Diff(DELETE,"FUNCALL (CURRY (CURRY PRODUCT3 2) 3) 4)¶F: FUNCALL¶E: (CURRY (CURRY PRODUCT"), Diff(INSERT,"< (+ "), Diff(EQUAL,"3 2) 3)¶Evluating: ("), Diff(DELETE,"CURRY (CURRY PRODUCT3 2) 3)¶Evluating: (CURRY PRODUCT3 2)¶UnEvaluated Expression: (CURRY (CURRY PRODUCT3 2) 3)¶Evaluated Expression: LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)) (QUOTE 3) Z)¶Evluating: (FUNCALL (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)) (QUOTE 3) Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))¶Evluating: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))¶UnEvaluated Expression: (QUOTE LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z))¶Evaluated Expression: LAMBDA (Y Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶Evluating: (QUOTE 3)¶Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) Y Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶UnEvaluated Expression: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evaluated Expression: LAMBDA (X Y Z) (* X (* Y Z))¶Evluating: (QUOTE 2)¶Evluating: (* X (* Y Z))¶Evluating: (* Y Z)¶Test execution time (ms):1¶Evluating: (FUNCALL (CURRY PRODUCT3 2 3) 4)¶F: FUNCALL¶E: (CURRY PRODUCT3 2 3)¶Evluating: (CURRY PRODUCT3 2 3)¶UnEvaluated Expression: (CURRY PRODUCT3 2 3)¶Evaluated Expression: LAMBDA (Z) (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) (QUOTE 3) Z)¶Evluating: (FUNCALL (QUOTE LAMBDA (X Y Z) (* X (* Y Z))) (QUOTE 2) (QUOTE 3) Z)¶F: FUNCALL¶E: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))¶Evluating: (QUOTE LAMBDA (X Y Z) (* X (* Y Z)))"), Diff(INSERT,"+ 3 2)¶Test execution time (ms):0¶Evluating: (<= (+ 1 2) (EVAL 5))¶Evluating: (+ 1 2)¶Evluating: (EVAL 5)¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15360" _type="PauseCommand" date="Mon Nov 29 21:13:08 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37856941">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1553]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15359" _type="ConsoleOutput" date="Mon Nov 29 21:13:08 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37856941" type="ConsoleOutput">
    <outputString><![CDATA[Evluating: (AND T 2)
Test execution time (ms):1
Evluating: (OR (= 1 2) (+ 3 3))
Evluating: (= 1 2)
Evluating: (+ 3 3)
Test execution time (ms):0
Evluating: (NOT (+ 1 8))
Evluating: (+ 1 8)
Test execution time (ms):0
Evluating: (AND (/= 3 4) (> 3 2) (+ 8 9) (- 3 1))
Evluating: (/= 3 4)
Evluating: (> 3 2)
Evluating: (+ 8 9)
Evluating: (- 3 1)
Test execution time (ms):1
Evluating: (OR (/= 1 1) (> 3 3) (>= 2 2) 9)
Evluating: (/= 1 1)
Evluating: (> 3 3)
Evluating: (>= 2 2)
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Evluating: ("), Diff(DELETE,"> (+"), Diff(INSERT,"AND T 2)¶Test execution time (ms):1¶Evluating: (OR (="), Diff(EQUAL," 1 "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,") ("), Diff(DELETE,"- 2 1"), Diff(INSERT,"+ 3 3"), Diff(EQUAL,"))¶Evluating: ("), Diff(DELETE,"+"), Diff(INSERT,"="), Diff(EQUAL," 1 "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"- 2 1"), Diff(INSERT,"+ 3 3"), Diff(EQUAL,")¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,">= 1"), Diff(INSERT,"NOT"), Diff(EQUAL," (+ 1 "), Diff(DELETE,"1"), Diff(INSERT,"8"), Diff(EQUAL,"))¶Evluating: (+ 1 "), Diff(DELETE,"1"), Diff(INSERT,"8"), Diff(EQUAL,")¶Test execution time (ms):0¶Evluating: ("), Diff(DELETE,"< (+ 3 2) 3)¶Evluating: (+ 3 2"), Diff(INSERT,"AND (/= 3 4) (> 3 2) (+ 8 9) (- 3 1))¶Evluating: (/= 3 4)¶Evluating: (> 3 2)¶Evluating: (+ 8 9)¶Evluating: (- 3 1"), Diff(EQUAL,")¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶Evluating: ("), Diff(DELETE,"<= (+"), Diff(INSERT,"OR (/="), Diff(EQUAL," 1 "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,") ("), Diff(DELETE,"EVAL 5)"), Diff(INSERT,"> 3 3) (>= 2 2) 9"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"+"), Diff(INSERT,"/="), Diff(EQUAL," 1 "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,")¶Evluating: ("), Diff(DELETE,"EVAL 5"), Diff(INSERT,"> 3 3)¶Evluating: (>= 2 2"), Diff(EQUAL,")¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="15362" _type="PauseCommand" date="Mon Nov 29 21:13:09 EST 2021" range="1s-2s" starttimestamp="1638200531246" timestamp="37858029">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1088]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="15361" _type="ConsoleOutput" date="Mon Nov 29 21:13:09 EST 2021" overflow="false" starttimestamp="1638200531246" timestamp="37858029" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):8
Test execution time (ms):7
Test execution time (ms):2
Test execution time (ms):3
A6NonPublicAccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.0

Test execution time (ms):8
Test execution time (ms):6
Test execution time (ms):2
Test execution time (ms):2
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Evluating: (AND T 2)"), Diff(INSERT,"Test execution time (ms):8"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"7"), Diff(EQUAL,"¶"), Diff(DELETE,"Evluating: (OR (= 1 2) (+ 3 3))¶Evluating: (= 1 2)¶Evluating: (+ 3 3)"), Diff(INSERT,"Test execution time (ms):2"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"¶"), Diff(DELETE,"Evluating: (NOT (+ 1 8))¶Evluating: (+ 1 8)¶Test execution time (ms):0¶Evluating: (AND (/= 3 4) (> 3 2) (+ 8 9) (- 3 1))¶Evluating: (/= 3 4)¶Evluating: (> 3 2)¶Evluating: (+ 8 9)¶Evluating: (- 3 1)"), Diff(INSERT,"A6NonPublicAccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.0¶¶Test execution time (ms):8¶Test execution time (ms):6"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"¶"), Diff(DELETE,"Evluating: (OR (/= 1 1) (> 3 3) (>= 2 2) 9)¶Evluating: (/= 1 1)¶Evluating: (> 3 3)¶Evluating: (>= 2 2)"), Diff(INSERT,"Test execution time (ms):2"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
</Events>
